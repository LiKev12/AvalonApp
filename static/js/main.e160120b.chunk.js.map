{"version":3,"sources":["components/Pages/AboutPage/AboutPage.module.css","components/GameRoom/GameBoard/RoundTracker/RoundTracker.module.css","components/Pages/RulesPage/FeatureCards/FeatureCard/FeatureCard.module.css","components/Pages/AboutPage/AboutStatsGames/AboutStatsGames.module.css","components/Pages/AboutPage/AboutStatsUsers/AboutStatsUsers.module.css","components/Pages/Loading/LoadingSpinner.module.css","components/GameRoom/GameRoom.module.css","components/GameRoom/GameBoard/GameBoard.module.css","components/Lobby/LobbyModal/LobbyModal.module.css","components/Pages/RulesPage/RulesPage.module.css","components/Pages/StatsPage/StatsHeadToHead/StatsHeadToHead.module.css","components/GameRoom/GameEnterModal/GameEnterModal.module.css","components/GameRoom/GameCommon/GameNav/GameNav.module.css","components/GameRoom/GameCommon/GameNav/GameVotingRecord/GameVotingRecord.module.css","components/GameRoom/GameSetupModal/GameSetupModal.module.css","components/Lobby/LobbyPage.module.css","components/Lobby/LobbyTable/LobbyPrivateRoomModal/LobbyPrivateRoomModal.module.css","components/Pages/RulesPage/CharacterCards/CharacterCards.module.css","components/Pages/StatsPage/StatsPage.module.css","components/Pages/StatsPage/StatsIndividualHistory/StatsIndividualHistory.module.css","components/Lobby/LobbyTable/LobbyTable.module.css","components/Pages/StatsPage/StatsIndividualByRoles/StatsIndividualByRoles.module.css","components/Pages/StatsPage/StatsIndividualOverall/StatsIndividualOverall.module.css","components/Chat/Chat.module.css","actions/types.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/index.js","store.js","actions/errorActions.js","actions/authActions.js","components/App/AppNavbar/NavLinks/NavLinks.js","components/Auth/LoginModal.js","components/App/AppNavbar/NavLinks/LogoutLink.js","components/Auth/RegisterModal.js","components/App/AppNavbar/AppNavbar.js","media/RoleAvatars/Assassin.png","media/RoleAvatars/DrunkMerlin.png","media/RoleAvatars/LoyalServant.png","media/RoleAvatars/Merlin.png","media/RoleAvatars/Minion.png","media/RoleAvatars/Mordred.png","media/RoleAvatars/Morgana.png","media/RoleAvatars/Oberon.png","media/RoleAvatars/Percival.png","media/RoleAvatars/Unknown.png","media/RoleAvatars/index.js","components/Pages/AboutPage/AboutLeaderboard/AboutLeaderboard.js","components/Pages/AboutPage/AboutStatsGames/AboutStatsGames.js","components/Pages/AboutPage/AboutStatsUsers/AboutStatsUsers.js","components/Pages/Loading/AvalonSpinner.png","components/Pages/Loading/LoadingSpinner.js","components/Pages/AboutPage/AboutPage.js","service/socket.js","components/Pages/AccessDeniedPage/AccessDeniedPage.js","components/GameRoom/GameBoard/PlayerCard/PlayerCard.js","media/Tokens/TokenRound.png","media/Tokens/TokenRound1.png","media/Tokens/TokenRound2.png","media/Tokens/TokenRound3.png","media/Tokens/TokenRound4.png","media/Tokens/TokenRound5.png","components/GameRoom/GameBoard/RoundTracker/RoundTracker.js","media/Tokens/TokenNull.png","media/Tokens/TokenPass.png","media/Tokens/TokenFail.png","components/GameRoom/GameBoard/MissionTracker/MissionTracker.js","constants/buttons.js","components/GameRoom/GameBoard/GameButtons/GameButtons.js","components/GameRoom/GameBoard/GameBoard.js","components/GameRoom/GameEnterModal/GameEnterModal.js","components/Chat/Chat.js","components/GameRoom/GameCommon/GameNav/GameTranscript/GameTranscript.js","components/GameRoom/GameCommon/GameNav/GameVotingRecord/GameVotingRecord.js","components/GameRoom/GameCommon/GameNav/GameNav.js","components/GameRoom/GameSetupModal/GameSetupValidator/GameSetupValidator.js","components/GameRoom/GameSetupModal/GameSetupModal.js","components/Pages/InvalidGamePage/InvalidGamePage.js","components/GameRoom/GameCommon/PlayersList/PlayersList.js","components/GameRoom/GameRoom.js","components/Lobby/LobbyModal/LobbyModal.js","components/Lobby/LobbyTable/LobbyPrivateRoomModal/LobbyPrivateRoomModal.js","components/Lobby/LobbyTable/LobbyTable.js","components/Lobby/LobbyPage.js","components/Pages/WelcomePage/WelcomePage.js","components/Pages/HomePage/HomePage.js","components/Pages/RulesPage/CharacterCards/CharacterCard/CharacterCard.js","components/Pages/RulesPage/CharacterCards/CharacterCards.js","components/Pages/RulesPage/FeatureCards/FeatureCard/FeatureCard.js","components/Pages/RulesPage/FeatureCards/FeatureCards.js","components/Pages/RulesPage/RulesPage.js","components/Pages/StatsPage/StatsIndividualByRoles/StatsIndividualByRoles.js","components/Pages/StatsPage/StatsIndividualHistory/StatsIndividualHistory.js","components/Pages/StatsPage/StatsIndividualOverall/StatsIndividualOverall.js","components/Pages/StatsPage/StatsHeadToHead/StatsHeadToHead.js","components/Pages/StatsPage/StatsPage.js","components/App/AppRoutes/AppRoutes.js","App.js","reportWebVitals.js","index.js","components/Pages/AboutPage/AboutLeaderboard/AboutLeaderboard.module.css","components/GameRoom/GameBoard/PlayerCard/PlayerCard.module.css","components/GameRoom/GameBoard/GameButtons/GameButtons.module.css","components/Pages/WelcomePage/WelcomePage.module.css","components/GameRoom/GameBoard/MissionTracker/MissionTracker.module.css","components/GameRoom/GameCommon/GameNav/GameTranscript/GameTranscript.module.css","components/Pages/RulesPage/CharacterCards/CharacterCard/CharacterCard.module.css"],"names":["module","exports","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","GET_ERRORS","CLEAR_ERRORS","initialState","msg","status","id","token","sessionStorage","getItem","isAuthenticated","isLoading","user","combineReducers","error","state","action","type","payload","auth","setItem","name","removeItem","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","returnErrors","clearErrors","tokenConfig","getState","config","headers","HomeLink","NavLink","href","AboutLink","RulesLink","StatsLink","LoginModal","modal","password","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","login","prevProps","this","onClick","Modal","isOpen","ModalHeader","ModalBody","Alert","color","Form","FormGroup","Label","for","Input","placeholder","className","Button","style","marginTop","block","Component","connect","dispatch","body","JSON","stringify","axios","post","then","res","data","catch","err","response","LogoutLink","logout","RegisterModal","email","newUser","register","maxLength","AppNavbar","displayedUserName","sharedLinks","NavItem","authLinks","guestLinks","Navbar","dark","expand","Container","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","Assassin","AssassinImage","DrunkMerlin","DrunkMerlinImage","LoyalServant","LoyalServantImage","Merlin","MerlinImage","Minion","MinionImage","Mordred","MordredImage","Morgana","MorganaImage","Oberon","OberonImage","Percival","PercivalImage","Unknown","UnknownImage","AboutLeaderboard","leaderboardData","loadingRow","colSpan","textAlign","placeholderRow","tableBody","length","getTableBodyRows","classes","LeaderboardBanner","Table","CellCenterText","map","singleRowData","idx","user_name","rating","AboutStatsGames","gamesOverTimeData","ChartOuterContainer","ChartInnerContainer","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","yAxisId","allowDecimals","angle","position","dx","stroke","activeDot","r","orientation","AboutStatsUsers","usersOverTimeData","LoadingSpinner","FullPageContainer","FullPageLoadingSpinner","src","Spinner","alt","AboutPage","isLoadingUsersOverTime","isLoadingGamesOverTime","isLoadingLeaderboard","AboutTextContainer","aboutSection","feedbackSection","fontStyle","Avatars","rel","socket","io","AccessDeniedPage","PlayerCard","player","player_idx","total_num_players","onClickPlayerCard","button","isSelected","isLeader","isHammer","isGivenExcalibur","isGivenLOTL","activeState","roleAppearsAs","teamAppearsAs","overrideStyle","getStyle","LeaderMarker","MissionMarker","ExcaliburMarker","LadyMarker","NameBanner","map_name_to_avatar","map_team_to_border","RESISTANCE","SPY","mapActiveState","IS_STILL_VOTING","IS_TARGETED_BY_EXCALIBUR","IS_TARGETED_BY_ASSASSIN","IS_TARGETED_BY_LOTL","degree_rotation","getDegreeRotation","RoundTracker","roundTrackerTokens","getRoundTrackerTokens","PropTypes","number","mapRoundToToken","0","RoundTrackerToken","1","RoundTrackerToken1","2","RoundTrackerToken2","3","RoundTrackerToken3","4","RoundTrackerToken4","5","RoundTrackerToken5","roundTrackerTokenCurrent","backgroundImage","getRoundTrackerToken","current_round","tokens","forEach","push","MissionTracker","mission_idx","isPassed","num_spots_on_mission","num_fails_required","getMissionTrackerToken","mapMissionStatusToToken","null","MissionTrackerTokenNull","true","MissionTrackerTokenPass","false","MissionTrackerTokenFail","missionTrackerText","MissionTrackerText","MissionTrackerSubtext","MissionTrackerToken","PROPOSE","ROUND","MISSION","ASSASSINATE","GIVE_EXCALIBUR","USE_EXCALIBUR","CONFIRM_EXCALIBUR","USE_LOTL","CONFIRM_LOTL","GameButtons","buttonVisible","handleOnClick","isAffirmative","onHandleButtonClick","renderedGameButtons","_getVisibleButtons","team","BUTTON_CONSTANTS","Fragment","GameButtonDuo","GameBoard","renderedPlayerCards","getPlayerCards","getGameButtons","GameBackground","MISSION_TRACKER","ROUND_TRACKER","viewBoard","board","playerCardsData","gameButtonsData","key","GameEnterModal","onHandleJoin","onHandleEnter","onHandleSpectate","onHandleRejoin","room","hasStarted","isPlayerInGame","buttonRejoin","buttonJoin","buttonSpectate","gameEnterModalButtons","keyboard","backdrop","ModalFooter","ModalFooterCustom","Chat","message","chat","socketEventListeners","on","changeTableScroll","handleSubmitMessage","flag","emit","objDiv","document","getElementById","scrollTop","scrollHeight","handleKeyDown","handleMessageChange","renderedChatMessages","chatObj","ChatTimestamp","ChatUsername","ChatMessage","borderless","size","OuterTableContainer","TableHeader","TableBodyContainer","TableBody","onKeyDown","GameTranscript","transcript","renderedTranscriptMessages","getMessagesFromTranscript","singleMessageText","centerStyle","GameVotingRecord","voting_record","players","record","getTableHeaders","missionHeader","roundHeader","getTableBody","TableContainer","bordered","order","missionNumber","roundNumber","user_idx","tableRow","currRound","cellBackgroundColor","votesRound","cellBorder","leader","cellContents","cellStyle","backgroundColor","border","GameNav","activeTab","toggleActiveTab","newActiveTab","tabs","classnames","active","TabContent","TabPane","tabId","map_role_to_team","isRolesValid","setup","roles","num_players","numResistanceRoles","numSpyRoles","role","isTwoTeams","isLessThanHalfSPY","isPercivalAndMorganaValid","isPercivalSelected","includes","isMorganaSelected","isMerlinSelected","isDrunkMerlinValid","GameSetupModal","buttonDisabled","num_roles_added","error_msg","features","Excalibur","onChangeCheck","input","inputs","check_form_validation","final_setup","get_final_setup","onSetup","Object","keys","filter","difference","Number","i","role_inputs","CustomInput","label","checked","other_inputs","feature","disabled","InvalidGamePage","PlayersList","players_list","striped","playerObj","GameRoom","isValid","hasLocked","hasSetup","isRoomLeader","PLAYERS_LIST","VOTING_RECORD","TRANSCRIPT","_get_user_id","_get_room_id","match","params","room_id","_get_room_pwd","is_public","pwd","socket_event_listeners","hasEnded","roomLeaderId","boards","buttons","teams","user_id","room_pwd","onLeaveRoom","onLockRoom","onStart","target_idx","isApproved","isExcaliburUsed","_getIsPlayerInGame","_getRoomLeaderButton","roomLeaderButton","needWaitToLock","needSetup","needStart","onHandleInitialize","window","addEventListener","removeEventListener","setTimeout","preGameComponents","gameComponents","DEFAULT_STATE","is_rated","isCreated","success_msg","LobbyModal","handleClickPublic","handleClickRated","_generateArrBetweenEnds","lower","upper","arrBetweenEnds","toString","_generateRandomRoomID","lengthLimit","characters","charactersLength","charAt","Math","floor","random","_generateRandomRoomPassword","toggleModalButton","ToggleLobbyModalButton","settingRadioButtons","check","typeRadioButtons","createRoomButton","CreateRoomButton","successMsg","gameLinkButton","to","LobbyPrivateRoomModal","enteredPassword","enterButtonDisabled","handleEnterPassword","event","buttonName","buttonColor","LobbyTableButton","LobbyTable","table_body","LobbyTableCell","lobby_data","room_data","isPublicSetting","isRated","gameStatus","getGameStatus","tableButton","getTableButton","scope","LobbyPage","chatHeader","lobbyHeader","LobbyPageContainer","WelcomePage","spacing","OuterContainer","InnerContainer","InnerText","SubText","DisclaimerText","HomePage","CharacterCard","avatar","description","CharacterCardContainer","CharacterCardImageContainer","CharacterCardImage","CharacterCardTextContainer","descriptionPoint","CharacterCards","characterCardsProps","getCharacterCardsProps","CharacterCardsContainer","characterCardProps","FeatureCard","FeatureCardContainer","FeatureCardHeaderContainer","FeatureCardTextContainer","FeatureCards","featureCardsProps","getFeatureCardsProps","featureCardProps","RulesPage","charactersSection","featuresSection","rulesSection","RulesVideoContainer","title","StatsIndividualByRoles","byRoles","noDataRow","byRolesTable","map_team_to_color","games_won","games_played","win_percentage","getWinPercentage","colorTeamAndRole","parseInt","round","COLOR_BLUE","COLOR_GREEN","COLOR_RED","StatsIndividualHistory","history","historyTable","date","result","dateText","getDateFormatted","settingText","typeText","numPlayersText","teamText","roleText","resultText","winningTeam","colorResult","dateTime","Date","toISOString","split","StatsIndividualOverall","overall","overallTable","TOTAL","colorTeam","StatsHeadToHead","enteredNames","headToHead","errorMsg","_get_user_name","isValidQuery","handleEnterNames","handlePressEnter","handleSearch","get","renderedErrorMessage","userNamesInput","InputGroup","onKeyPress","InputGroupAddon","addonType","tableBodyRows","renderedTableBodyRows","headToHeadTable","singlePlayerData","Player","Same","Different","gamesWonSameTeam","totalGamesPlayedSameTeam","winPercentageSameTeam","gamesWonDifferentTeam","totalGamesPlayedDifferentTeam","winPercentageDifferentTeam","verticalAlign","rowSpan","StatsPage","isLoadingRating","isLoadingStats","_getHistoryData","_getOverallData","_getByRolesData","RatingBanner","RESISTANCE_GAMES_WON","RESISTANCE_GAMES_PLAYED","SPY_GAMES_WON","SPY_GAMES_PLAYED","singleGameData","uniqueRolesAndTeams","setOfUniqueRoles","Set","mapRoleToGamesWon","Map","mapRoleToGamesPlayed","has","set","add","byRolesData","roleAndTeam","sort","a","b","sharedRoutes","exact","path","component","render","authRoutes","guestRoutes","App","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.e160120b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AboutPage\":\"AboutPage_AboutPage__265Bb\",\"Avatars\":\"AboutPage_Avatars__1-ES1\",\"AboutTextContainer\":\"AboutPage_AboutTextContainer__2_n2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RoundTracker\":\"RoundTracker_RoundTracker__36oUr\",\"RoundTrackerToken\":\"RoundTracker_RoundTrackerToken__2n2iT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FeatureCardContainer\":\"FeatureCard_FeatureCardContainer__2nfDA\",\"FeatureCardHeaderContainer\":\"FeatureCard_FeatureCardHeaderContainer__-sxyO\",\"FeatureCardImage\":\"FeatureCard_FeatureCardImage__mG2fh\",\"FeatureCardTextContainer\":\"FeatureCard_FeatureCardTextContainer__1RoVE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChartOuterContainer\":\"AboutStatsGames_ChartOuterContainer__2ieJ_\",\"ChartInnerContainer\":\"AboutStatsGames_ChartInnerContainer__1LT9i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChartOuterContainer\":\"AboutStatsUsers_ChartOuterContainer__3NuSZ\",\"ChartInnerContainer\":\"AboutStatsUsers_ChartInnerContainer__1THWe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FullPageContainer\":\"LoadingSpinner_FullPageContainer__2zTrn\",\"FullPageLoadingSpinner\":\"LoadingSpinner_FullPageLoadingSpinner__3c75m\",\"spin\":\"LoadingSpinner_spin__cyfS6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"GameRoom_Button__2hnSU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameBoard\":\"GameBoard_GameBoard__7eOzF\",\"GameBackground\":\"GameBoard_GameBackground__QvTqp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToggleLobbyModalButton\":\"LobbyModal_ToggleLobbyModalButton__1fdFb\",\"CreateRoomButton\":\"LobbyModal_CreateRoomButton__21tNV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RulesVideoContainer\":\"RulesPage_RulesVideoContainer__39rd9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellCenterText\":\"StatsHeadToHead_CellCenterText__1QQPh\",\"CellCenterTextVertical\":\"StatsHeadToHead_CellCenterTextVertical__3mRrP\",\"TableContainer\":\"StatsHeadToHead_TableContainer__3-6oo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModalFooterCustom\":\"GameEnterModal_ModalFooterCustom__35ouc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameNav\":\"GameNav_GameNav__8oISB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TableContainer\":\"GameVotingRecord_TableContainer__2f86_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"GameSetupModal_Button__2yOJQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LobbyPageContainer\":\"LobbyPage_LobbyPageContainer__33MOA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LobbyTableButton\":\"LobbyPrivateRoomModal_LobbyTableButton__2gqIZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CharacterCardsContainer\":\"CharacterCards_CharacterCardsContainer__2ZBwY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RatingBanner\":\"StatsPage_RatingBanner__1xx9e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellCenterText\":\"StatsIndividualHistory_CellCenterText__3Gnjb\",\"TableContainer\":\"StatsIndividualHistory_TableContainer__3kmf0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LobbyTableCell\":\"LobbyTable_LobbyTableCell__2eYxG\",\"LobbyTableButton\":\"LobbyTable_LobbyTableButton__3yGEX\",\"TableContainer\":\"LobbyTable_TableContainer__30bBD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellCenterText\":\"StatsIndividualByRoles_CellCenterText__OxnNC\",\"TableContainer\":\"StatsIndividualByRoles_TableContainer__3qDmC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellCenterText\":\"StatsIndividualOverall_CellCenterText__IxGlE\",\"TableContainer\":\"StatsIndividualOverall_TableContainer__1TGTS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatTimestamp\":\"Chat_ChatTimestamp__50tkV\",\"ChatUsername\":\"Chat_ChatUsername__3bZP8\",\"ChatMessage\":\"Chat_ChatMessage__1j9oh\",\"OuterTableContainer\":\"Chat_OuterTableContainer__3JKwI\",\"TableHeader\":\"Chat_TableHeader__3h1Si\",\"TableBodyContainer\":\"Chat_TableBodyContainer__6HfYG\",\"TableBody\":\"Chat_TableBody__3YEIt\"};","export const USER_LOADING = 'USER_LOADING';\nexport const USER_LOADED = 'USER_LOADED';\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\nexport const GET_ERRORS = 'GET_ERRORS';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\n","import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\n\nconst initialState = {\n    msg: {},\n    status: null,\n    id: null\n};\n\n// eslint-disable-next-line\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return {\n                msg: action.payload.msg,\n                status: action.payload.status,\n                id: action.payload.id\n            };\n        case CLEAR_ERRORS:\n            return {\n                msg: {},\n                status: null,\n                id: null\n            };\n        default:\n            return state;\n    }\n}\n","import {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from '../actions/types';\n\nconst initialState = {\n    token: sessionStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null\n};\n\n// eslint-disable-next-line\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            };\n\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload.user\n            };\n\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n            sessionStorage.setItem('token', action.payload.token);\n            sessionStorage.setItem('user_name', action.payload.user.name);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false\n            };\n\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n            sessionStorage.removeItem('token');\n            sessionStorage.removeItem('user_name');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false\n            };\n\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport errorReducer from './errorReducer';\nimport authReducer from './authReducer';\n\nexport default combineReducers({\n    error: errorReducer,\n    auth: authReducer\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(applyMiddleware(...middleware))\n    /**\n     * USE BELOW FOR DEVELOPMENT ONLY\n     */\n    // compose(\n    //     applyMiddleware(...middleware),\n    //     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    // )\n);\n\nexport default store;\n","import { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\n\n// RETURN ERRORS\nexport const returnErrors = (msg, status, id = null) => {\n    return {\n        type: GET_ERRORS,\n        payload: { msg, status, id }\n    };\n};\n\n// CLEAR ERRORS\nexport const clearErrors = () => {\n    return {\n        type: CLEAR_ERRORS\n    };\n};\n","import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from './types';\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: USER_LOADING });\n\n    axios\n        .get('/api/auth/user', tokenConfig(getState))\n        .then(res =>\n            dispatch({\n                type: USER_LOADED,\n                payload: res.data\n            })\n        )\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n};\n\n// Register user\nexport const register = ({ name, email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    // Request body\n    const body = JSON.stringify({ name, email, password });\n\n    axios\n        .post('/api/users', body, config)\n        .then(res =>\n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data\n            })\n        )\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        });\n};\n// Login User\nexport const login = ({ name, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    // Request body\n    const body = JSON.stringify({ name, password });\n\n    axios\n        .post('/api/auth', body, config)\n        .then(res =>\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            })\n        )\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n\n            dispatch({\n                type: LOGIN_FAIL\n            });\n        });\n};\n\n// Logout User\nexport const logout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    };\n};\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n    // Get token from localstorage\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    };\n\n    // If token, add to headers\n    if (token) {\n        config.headers['x-auth-token'] = token;\n    }\n\n    return config;\n};\n","import React from 'react';\nimport { NavLink } from 'reactstrap';\n\nexport function HomeLink() {\n    return (\n        <div>\n            <NavLink href='/AvalonApp/#'>Home</NavLink>\n        </div>\n    );\n}\n\nexport function AboutLink() {\n    return (\n        <div>\n            <NavLink href='/about'>About</NavLink>\n        </div>\n    );\n}\n\nexport function RulesLink() {\n    return (\n        <div>\n            <NavLink href='/rules'>Rules</NavLink>\n        </div>\n    );\n}\n\nexport function StatsLink() {\n    return (\n        <div>\n            <NavLink href='/stats'>Stats</NavLink>\n        </div>\n    );\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\n\nimport { login } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass LoginModal extends Component {\n    state = {\n        modal: false,\n        name: '',\n        password: '',\n        msg: null\n    };\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        error: PropTypes.object.isRequired,\n        login: PropTypes.func.isRequired,\n        clearErrors: PropTypes.func.isRequired\n    };\n\n    componentDidUpdate(prevProps) {\n        const { error, isAuthenticated } = this.props;\n        if (error !== prevProps.error) {\n            if (error.id === 'LOGIN_FAIL') {\n                this.setState({ msg: error.msg.msg });\n            } else {\n                this.setState({ msg: null });\n            }\n        }\n\n        // If authenticated, close modal\n        if (this.state.modal) {\n            if (isAuthenticated) {\n                this.toggle();\n            }\n        }\n    }\n\n    toggle = () => {\n        this.props.clearErrors();\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    onChange = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    onSubmit = e => {\n        e.preventDefault();\n\n        const { name, password } = this.state;\n\n        const user = {\n            name,\n            password\n        };\n\n        // Attempt to login\n        this.props.login(user);\n    };\n\n    render() {\n        return (\n            <div>\n                <NavLink onClick={this.toggle} href=\"#\">\n                    Login\n                </NavLink>\n\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>Login</ModalHeader>\n                    <ModalBody>\n                        {this.state.msg ? <Alert color=\"danger\">{this.state.msg}</Alert> : null}\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"name\">Username</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    id=\"name\"\n                                    placeholder=\"Username\"\n                                    className=\"mb-3\"\n                                    onChange={this.onChange}\n                                />\n                                <Label for=\"password\">Password</Label>\n                                <Input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    id=\"password\"\n                                    placeholder=\"Password\"\n                                    className=\"mb-3\"\n                                    onChange={this.onChange}\n                                />\n                                <Button color=\"dark\" style={{ marginTop: '2rem' }} block>\n                                    Login\n                                </Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n});\n\nexport default connect(mapStateToProps, { login, clearErrors })(LoginModal);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { NavLink } from 'reactstrap';\nimport { logout } from '../../../../actions/authActions';\n\nexport class LogoutLink extends Component {\n    render() {\n        return (\n            <Fragment>\n                <NavLink onClick={this.props.logout} href=\"/\">\n                    Logout\n                </NavLink>\n            </Fragment>\n        );\n    }\n}\n\nLogoutLink.propTypes = {\n    logout: PropTypes.func.isRequired\n};\n\nexport default connect(null, { logout })(LogoutLink);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\n\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass RegisterModal extends Component {\n    state = {\n        modal: false,\n        name: '',\n        email: '',\n        password: '',\n        msg: null\n    };\n\n    componentDidUpdate(prevProps) {\n        const { error, isAuthenticated } = this.props;\n        if (error !== prevProps.error) {\n            if (error.id === 'REGISTER_FAIL') {\n                this.setState({ msg: error.msg.msg });\n            } else {\n                this.setState({ msg: null });\n            }\n        }\n\n        // If authenticated, close modal\n        if (this.state.modal) {\n            if (isAuthenticated) {\n                this.toggle();\n            }\n        }\n    }\n\n    toggle = () => {\n        this.props.clearErrors();\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    onChange = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    onSubmit = e => {\n        e.preventDefault();\n\n        const { name, email, password } = this.state;\n\n        // Create user object\n        const newUser = {\n            name,\n            email,\n            password\n        };\n\n        // Attempt to register\n        this.props.register(newUser);\n    };\n\n    render() {\n        return (\n            <div>\n                <NavLink onClick={this.toggle} href=\"#\">\n                    Register\n                </NavLink>\n\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>Register</ModalHeader>\n                    <ModalBody>\n                        {this.state.msg ? <Alert color=\"danger\">{this.state.msg} </Alert> : null}\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"name\">Username</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    id=\"name\"\n                                    placeholder=\"Name\"\n                                    className=\"mb-3\"\n                                    onChange={this.onChange}\n                                    maxLength={15}\n                                />\n                                <Label for=\"email\">Email</Label>\n                                <Input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    id=\"email\"\n                                    placeholder=\"Email\"\n                                    className=\"mb-3\"\n                                    onChange={this.onChange}\n                                />\n                                <Label for=\"password\">Password</Label>\n                                <Input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    id=\"password\"\n                                    placeholder=\"Password\"\n                                    className=\"mb-3\"\n                                    onChange={this.onChange}\n                                />\n                                <Button color=\"dark\" style={{ marginTop: '2rem' }} block>\n                                    Register\n                                </Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nRegisterModal.propTypes = {\n    isAuthenticated: PropTypes.bool,\n    error: PropTypes.object.isRequired,\n    register: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n});\n\nexport default connect(mapStateToProps, { register, clearErrors })(RegisterModal);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, Container } from 'reactstrap';\n\nimport { HomeLink, AboutLink, RulesLink, StatsLink } from './NavLinks/NavLinks';\nimport LoginModal from '../../Auth/LoginModal';\nimport LogoutLink from './NavLinks/LogoutLink';\nimport RegisterModal from '../../Auth/RegisterModal';\n\nclass AppNavbar extends Component {\n    state = {\n        isOpen: false\n    };\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    };\n\n    render() {\n        const { isAuthenticated } = this.props.auth;\n        const displayedUserName = this.props.auth && this.props.auth.user ? this.props.auth.user.name : '';\n\n        const sharedLinks = (\n            <Fragment>\n                <NavItem>\n                    <HomeLink />\n                </NavItem>\n                <NavItem>\n                    <AboutLink />\n                </NavItem>\n                <NavItem>\n                    <RulesLink />\n                </NavItem>\n            </Fragment>\n        );\n\n        const authLinks = (\n            <Fragment>\n                <NavItem>\n                    <span className=\"navbar-text mr-3\">\n                        <strong>{`Welcome ${displayedUserName}`}</strong>\n                    </span>\n                </NavItem>\n                {sharedLinks}\n                <NavItem>\n                    <StatsLink />\n                </NavItem>\n                <NavItem>\n                    <LogoutLink />\n                </NavItem>\n            </Fragment>\n        );\n\n        const guestLinks = (\n            <Fragment>\n                {sharedLinks}\n                <NavItem>\n                    <RegisterModal />\n                </NavItem>\n                <NavItem>\n                    <LoginModal />\n                </NavItem>\n            </Fragment>\n        );\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"sm\">\n                    <Container>\n                        <NavbarBrand href=\"/\">Avalon</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} />\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                {isAuthenticated ? authLinks : guestLinks}\n                            </Nav>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nAppNavbar.propTypes = {\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, null)(AppNavbar);\n","export default __webpack_public_path__ + \"static/media/Assassin.5a5d7bc4.png\";","export default __webpack_public_path__ + \"static/media/DrunkMerlin.8f7762fb.png\";","export default __webpack_public_path__ + \"static/media/LoyalServant.119ec312.png\";","export default __webpack_public_path__ + \"static/media/Merlin.e3edb5d5.png\";","export default __webpack_public_path__ + \"static/media/Minion.da0a369a.png\";","export default __webpack_public_path__ + \"static/media/Mordred.03c972d0.png\";","export default __webpack_public_path__ + \"static/media/Morgana.c08a9b92.png\";","export default __webpack_public_path__ + \"static/media/Oberon.49ff93ae.png\";","export default __webpack_public_path__ + \"static/media/Percival.c47c4ea0.png\";","export default __webpack_public_path__ + \"static/media/Unknown.448807e5.png\";","import AssassinImage from './Assassin.png';\nimport DrunkMerlinImage from './DrunkMerlin.png';\nimport LoyalServantImage from './LoyalServant.png';\nimport MerlinImage from './Merlin.png';\nimport MinionImage from './Minion.png';\nimport MordredImage from './Mordred.png';\nimport MorganaImage from './Morgana.png';\nimport OberonImage from './Oberon.png';\nimport PercivalImage from './Percival.png';\nimport UnknownImage from './Unknown.png';\n\nexport const Assassin = AssassinImage;\nexport const DrunkMerlin = DrunkMerlinImage;\nexport const LoyalServant = LoyalServantImage;\nexport const Merlin = MerlinImage;\nexport const Minion = MinionImage;\nexport const Mordred = MordredImage;\nexport const Morgana = MorganaImage;\nexport const Oberon = OberonImage;\nexport const Percival = PercivalImage;\nexport const Unknown = UnknownImage;\n","import React from 'react';\nimport classes from './AboutLeaderboard.module.css';\nimport PropTypes from 'prop-types';\nimport { Table } from 'reactstrap';\n\nconst AboutLeaderboard = props => {\n    const { leaderboardData } = props;\n    const loadingRow = (\n        <tr key=\"loading\">\n            <th colSpan=\"3\" style={{ textAlign: 'center' }}>\n                Stats are loading...\n            </th>\n        </tr>\n    );\n    const noDataRow = (\n        <tr key=\"noData\">\n            <th colSpan=\"3\" style={{ textAlign: 'center' }}>\n                No stats to show. Please play more games to see.\n            </th>\n        </tr>\n    );\n    const placeholderRow = leaderboardData ? noDataRow : loadingRow;\n    const tableBody =\n        leaderboardData && leaderboardData.length > 0 ? getTableBodyRows(leaderboardData) : placeholderRow;\n\n    return (\n        <div>\n            <div className={classes.LeaderboardBanner}>Leaderboard</div>\n            <Table dark>\n                <thead>\n                    <tr>\n                        <th className={classes.CellCenterText}>#</th>\n                        <th className={classes.CellCenterText}>Username</th>\n                        <th className={classes.CellCenterText}>Rating</th>\n                    </tr>\n                </thead>\n                <tbody>{tableBody}</tbody>\n            </Table>\n        </div>\n    );\n};\n\nAboutLeaderboard.propTypes = {\n    /**\n     * [{user_name, rating}]\n     */\n    leaderboardData: PropTypes.array\n};\n\nexport default AboutLeaderboard;\n\nconst getTableBodyRows = leaderboardData => {\n    const tableBodyRows = leaderboardData.map((singleRowData, idx) => {\n        const { user_name, rating } = singleRowData;\n        return (\n            <tr key={idx + 1}>\n                <td className={classes.CellCenterText}>{idx + 1}</td>\n                <td className={classes.CellCenterText}>{user_name}</td>\n                <td className={classes.CellCenterText}>{rating}</td>\n            </tr>\n        );\n    });\n    return tableBodyRows;\n};\n","import React from 'react';\nimport classes from './AboutStatsGames.module.css';\nimport PropTypes from 'prop-types';\nimport { LineChart, Line, Label, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\n\nconst AboutStatsGames = props => {\n    const { gamesOverTimeData } = props;\n    return (\n        <div className={classes.ChartOuterContainer}>\n            <div className={classes.ChartInnerContainer}>\n                <LineChart\n                    width={800}\n                    height={400}\n                    data={gamesOverTimeData}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"Date\"></XAxis>\n                    <YAxis yAxisId=\"left\" allowDecimals={false}>\n                        <Label value=\"Total Games\" angle={-90} position=\"center\" dx={-20} />\n                    </YAxis>\n                    <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"Total Games\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                    <YAxis yAxisId=\"right\" orientation=\"right\" allowDecimals={false}>\n                        <Label value=\"New Games\" angle={90} position=\"center\" dx={20} />\n                    </YAxis>\n                    <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"New Games\" stroke=\"#82ca9d\" />\n                    <Tooltip />\n                    <Legend />\n                </LineChart>\n            </div>\n        </div>\n    );\n};\n\nAboutStatsGames.propTypes = {\n    gamesOverTimeData: PropTypes.array\n};\n\nexport default AboutStatsGames;\n","import React from 'react';\nimport classes from './AboutStatsUsers.module.css';\nimport PropTypes from 'prop-types';\nimport { LineChart, Line, Label, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\n\nconst AboutStatsUsers = props => {\n    const { usersOverTimeData } = props;\n    return (\n        <div className={classes.ChartOuterContainer}>\n            <div className={classes.ChartInnerContainer}>\n                <LineChart\n                    width={800}\n                    height={400}\n                    data={usersOverTimeData}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"Date\"></XAxis>\n                    <YAxis yAxisId=\"left\" allowDecimals={false}>\n                        <Label value=\"Total Users\" angle={-90} position=\"center\" dx={-20} />\n                    </YAxis>\n                    <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"Total Users\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                    <YAxis yAxisId=\"right\" orientation=\"right\" allowDecimals={false}>\n                        <Label value=\"New Users\" angle={90} position=\"center\" dx={20} />\n                    </YAxis>\n                    <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"New Users\" stroke=\"#82ca9d\" />\n                    <Tooltip />\n                    <Legend />\n                </LineChart>\n            </div>\n        </div>\n    );\n};\n\nAboutStatsUsers.propTypes = {\n    usersOverTimeData: PropTypes.array\n};\n\nexport default AboutStatsUsers;\n\n//http://recharts.org/en-US/examples/BiaxialLineChart\n","export default __webpack_public_path__ + \"static/media/AvalonSpinner.48e2424c.png\";","import React from 'react';\nimport classes from './LoadingSpinner.module.css';\nimport Spinner from './AvalonSpinner.png';\n\nconst LoadingSpinner = props => {\n    return (\n        <div className={classes.FullPageContainer}>\n            <img className={classes.FullPageLoadingSpinner} src={Spinner} alt=\"loading\" />\n        </div>\n    );\n};\n\nexport default LoadingSpinner;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport classes from './AboutPage.module.css';\nimport { Container } from 'reactstrap';\n\nimport { Merlin, Percival } from '../../../media/RoleAvatars';\nimport AboutLeaderboard from './AboutLeaderboard/AboutLeaderboard';\nimport AboutStatsGames from './AboutStatsGames/AboutStatsGames';\nimport AboutStatsUsers from './AboutStatsUsers/AboutStatsUsers';\nimport LoadingSpinner from '../Loading/LoadingSpinner';\n\nclass AboutPage extends Component {\n    state = {\n        //\n        isLoadingUsersOverTime: false,\n        isLoadingGamesOverTime: false,\n        isLoadingLeaderboard: false,\n        usersOverTimeData: null,\n        gamesOverTimeData: null,\n        leaderboardData: null,\n    };\n\n    componentDidMount() {\n        // // 1) Get Users data over time (New Users and Total Users)\n        // axios.get(`/api/users/getUsersOverTime`).then((res) => {\n        //     const usersOverTimeData = res.data;\n        //     this.setState({\n        //         isLoadingUsersOverTime: false,\n        //         usersOverTimeData,\n        //     });\n        // });\n        // // 2) Get Games data over time (New Games and Total Games)\n        // axios.get(`/api/games/getGamesOverTime`).then((res) => {\n        //     const gamesOverTimeData = res.data;\n        //     this.setState({\n        //         isLoadingGamesOverTime: false,\n        //         gamesOverTimeData,\n        //     });\n        // });\n        // // 3) Get users with the topK (set to 5) ratings\n        // const ratingsTopK = 5;\n        // axios.get(`/api/ratings/topRatings/${ratingsTopK}`).then((res) => {\n        //     const leaderboardData = res.data;\n        //     this.setState({\n        //         isLoadingLeaderboard: false,\n        //         leaderboardData,\n        //     });\n        // });\n    }\n\n    render() {\n        const {\n            isLoadingUsersOverTime,\n            isLoadingGamesOverTime,\n            isLoadingLeaderboard,\n            usersOverTimeData,\n            gamesOverTimeData,\n            leaderboardData,\n        } = this.state;\n\n        // if (isLoadingUsersOverTime || isLoadingGamesOverTime || isLoadingLeaderboard) {\n        //     return <LoadingSpinner />;\n        // }\n\n        return (\n            <div className={classes.AboutPage}>\n                <Container>\n                    <hr />\n                    <h3>About the App</h3>\n                    <hr />\n                    <h4>Stats temporarily down, peaked at 150 active users and over 500 games</h4>\n                    <AboutStatsUsers usersOverTimeData={usersOverTimeData} />\n                    <AboutStatsGames gamesOverTimeData={gamesOverTimeData} />\n                    <hr />\n                    <AboutLeaderboard leaderboardData={leaderboardData} />\n                    <hr />\n                    <div className={classes.AboutTextContainer}>\n                        {aboutSection}\n                        {feedbackSection}\n                    </div>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default AboutPage;\n\nconst aboutSection = (\n    <div>\n        <h4>This was a fun project done by 2 friends in quarantine during the Covid-19 Pandemic.</h4>\n        <h5>\n            <div style={{ fontStyle: 'italic' }}>\n                ~ Art and design credits to a secret Merlin, coded by her Percival ~\n            </div>\n        </h5>\n        <div className={classes.Avatars}>\n            <img src={Merlin} alt='Merlin' />\n            <img src={Percival} alt='Percival' />\n        </div>\n    </div>\n);\n\nconst feedbackSection = (\n    <h6>\n        Feel free to leave feedback{' '}\n        <a href={`mailto:avalon.app.game@gmail.com?subject=AvalonApp`} target='_blank' rel='noopener noreferrer'>\n            here\n        </a>\n        . GitHub link{' '}\n        <a href='https://github.com/LiKev12/AvalonApp' target='_blank' rel='noopener noreferrer'>\n            here\n        </a>\n        .\n    </h6>\n);\n","import io from 'socket.io-client';\nexport const socket = io();\n","import React, { Component } from 'react';\nimport { Alert, Container } from 'reactstrap';\n\nclass AccessDeniedPage extends Component {\n    render() {\n        return (\n            <div>\n                <Container>\n                    <Alert color=\"danger\" style={{ marginTop: '2rem' }}>\n                        Please log in to view.\n                    </Alert>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default AccessDeniedPage;\n","import React from 'react';\nimport classes from './PlayerCard.module.css';\nimport PropTypes from 'prop-types';\nimport {\n    Assassin,\n    DrunkMerlin,\n    LoyalServant,\n    Merlin,\n    Minion,\n    Mordred,\n    Morgana,\n    Oberon,\n    Percival,\n    Unknown\n} from '../../../../media/RoleAvatars';\n\nconst PlayerCard = props => {\n    const { player, player_idx, total_num_players, onClickPlayerCard, button } = props;\n    const {\n        user_name,\n        isSelected,\n        isLeader,\n        isHammer,\n        isGivenExcalibur,\n        isGivenLOTL,\n        activeState,\n        roleAppearsAs,\n        teamAppearsAs\n    } = player;\n    const overrideStyle = getStyle(teamAppearsAs, roleAppearsAs, activeState, player_idx, total_num_players, button);\n    const displayedUserName = isHammer ? `\\u2606${user_name}` : user_name;\n    return (\n        <div className={classes.PlayerCard} style={overrideStyle} onClick={() => onClickPlayerCard(player_idx)}>\n            {isLeader ? <div className={classes.LeaderMarker}></div> : null}\n            {isSelected ? <div className={classes.MissionMarker}></div> : null}\n            {isGivenExcalibur ? <div className={classes.ExcaliburMarker}></div> : null}\n            {isGivenLOTL ? <div className={classes.LadyMarker}></div> : null}\n            <div className={classes.NameBanner}>{displayedUserName}</div>\n        </div>\n    );\n};\n\nPlayerCard.propTypes = {\n    /**\n     * player:\n     * { user_name, isSelected, isLeader, isHammer, isGivenExcalibur, isGivenLOTL, activeState, roleAppearsAs, teamAppearsAs }\n     */\n    player: PropTypes.object,\n    player_idx: PropTypes.number,\n    total_num_players: PropTypes.number,\n    onClickPlayerCard: PropTypes.func,\n    button: PropTypes.string\n};\n\nexport default PlayerCard;\n\nconst map_name_to_avatar = {\n    Assassin,\n    DrunkMerlin,\n    LoyalServant,\n    Percival,\n    Merlin,\n    Minion,\n    Mordred,\n    Morgana,\n    Oberon,\n    Unknown\n};\nconst map_team_to_border = {\n    RESISTANCE: '5px solid #7EC8E3',\n    SPY: '5px solid #f75454'\n};\n\nconst mapActiveState = {\n    IS_STILL_VOTING: '0 0 20px yellow',\n    IS_TARGETED_BY_EXCALIBUR: '0 0 20px purple',\n    IS_TARGETED_BY_ASSASSIN: '0 0 20px red',\n    IS_TARGETED_BY_LOTL: '0 0 20px #00FFFF'\n};\n\nconst getDegreeRotation = (player_idx, total_num_players) => {\n    let increment = 360 / total_num_players;\n    let initial_degree = 270;\n    let degree_rotation = initial_degree + increment * player_idx;\n\n    return degree_rotation;\n};\n\nconst getStyle = (teamAppearsAs, roleAppearsAs, activeState, player_idx, total_num_players) => {\n    let overrideStyle = {};\n    overrideStyle['border'] = map_team_to_border[teamAppearsAs];\n    overrideStyle['backgroundImage'] = `url(${map_name_to_avatar[roleAppearsAs]})`;\n    if (activeState) {\n        overrideStyle['boxShadow'] = mapActiveState[activeState];\n    }\n\n    let degree_rotation = getDegreeRotation(player_idx, total_num_players);\n    overrideStyle['transform'] = `rotate(${degree_rotation}deg) translate(320px) rotate(${-degree_rotation}deg)`;\n    return overrideStyle;\n};\n","export default __webpack_public_path__ + \"static/media/TokenRound.03c12dcd.png\";","export default __webpack_public_path__ + \"static/media/TokenRound1.fd700c31.png\";","export default __webpack_public_path__ + \"static/media/TokenRound2.9f388a6e.png\";","export default __webpack_public_path__ + \"static/media/TokenRound3.53a49c8e.png\";","export default __webpack_public_path__ + \"static/media/TokenRound4.7178df17.png\";","export default __webpack_public_path__ + \"static/media/TokenRound5.be5aa5fb.png\";","import React, { Fragment } from 'react';\nimport classes from './RoundTracker.module.css';\nimport PropTypes from 'prop-types';\n\nimport RoundTrackerToken from '../../../../media/Tokens/TokenRound.png';\nimport RoundTrackerToken1 from '../../../../media/Tokens/TokenRound1.png';\nimport RoundTrackerToken2 from '../../../../media/Tokens/TokenRound2.png';\nimport RoundTrackerToken3 from '../../../../media/Tokens/TokenRound3.png';\nimport RoundTrackerToken4 from '../../../../media/Tokens/TokenRound4.png';\nimport RoundTrackerToken5 from '../../../../media/Tokens/TokenRound5.png';\n\nconst RoundTracker = props => {\n    const roundTrackerTokens = getRoundTrackerTokens(props.data);\n    return <div className={classes.RoundTracker}>{roundTrackerTokens}</div>;\n};\n\nRoundTracker.props = {\n    data: PropTypes.number\n};\n\nexport default RoundTracker;\n\nconst mapRoundToToken = {\n    0: RoundTrackerToken,\n    1: RoundTrackerToken1,\n    2: RoundTrackerToken2,\n    3: RoundTrackerToken3,\n    4: RoundTrackerToken4,\n    5: RoundTrackerToken5\n};\n\nconst roundTrackerTokenCurrent = (\n    <div className={classes.RoundTrackerToken} style={{ backgroundImage: `url(${RoundTrackerToken})` }}></div>\n);\n\nconst getRoundTrackerToken = idx => {\n    return (\n        <div className={classes.RoundTrackerToken} style={{ backgroundImage: `url(${mapRoundToToken[idx]})` }}></div>\n    );\n};\n\nconst getRoundTrackerTokens = current_round => {\n    const tokens = [];\n    const order = [1, 2, 3, 4, 5];\n    order.forEach(idx => {\n        if (idx === current_round) {\n            tokens.push(<Fragment key={idx}>{roundTrackerTokenCurrent}</Fragment>);\n        } else {\n            tokens.push(<Fragment key={idx}>{getRoundTrackerToken(idx)}</Fragment>);\n        }\n    });\n    return tokens;\n};\n","export default __webpack_public_path__ + \"static/media/TokenNull.06cb4858.png\";","export default __webpack_public_path__ + \"static/media/TokenPass.058ecf61.png\";","export default __webpack_public_path__ + \"static/media/TokenFail.fbbf1c0c.png\";","import React from 'react';\nimport classes from './MissionTracker.module.css';\nimport PropTypes from 'prop-types';\n\nimport MissionTrackerTokenNull from '../../../../media/Tokens/TokenNull.png';\nimport MissionTrackerTokenPass from '../../../../media/Tokens/TokenPass.png';\nimport MissionTrackerTokenFail from '../../../../media/Tokens/TokenFail.png';\n\nconst MissionTracker = props => {\n    const order = [1, 2, 3, 4, 5];\n    const tokens = [];\n    order.forEach(mission_idx => {\n        const { isPassed, num_spots_on_mission, num_fails_required } = props.data[mission_idx];\n        const token = getMissionTrackerToken(isPassed, num_spots_on_mission, num_fails_required);\n        tokens.push(<div key={mission_idx}>{token}</div>);\n    });\n    return <div className={classes.MissionTracker}>{tokens}</div>;\n};\n\nMissionTracker.propTypes = {\n    /**\n     * data:\n     * {\n            1: { isPassed, num_spots_on_mission, num_fails_required }\n            2: { isPassed, num_spots_on_mission, num_fails_required }\n            3: { isPassed, num_spots_on_mission, num_fails_required }\n            4: { isPassed, num_spots_on_mission, num_fails_required }\n            5: { isPassed, num_spots_on_mission, num_fails_required }\n        };\n     */\n    data: PropTypes.object\n};\n\nexport default MissionTracker;\n\nconst mapMissionStatusToToken = {\n    null: MissionTrackerTokenNull,\n    true: MissionTrackerTokenPass,\n    false: MissionTrackerTokenFail\n};\n\nconst getMissionTrackerToken = (isPassed, num_spots_on_mission, num_fails_required) => {\n    const missionTrackerText = (\n        <div className={classes.MissionTrackerText}>\n            {num_spots_on_mission}\n            {num_fails_required > 1 ? <sub className={classes.MissionTrackerSubtext}>{num_fails_required}</sub> : null}\n        </div>\n    );\n\n    return (\n        <div\n            className={classes.MissionTrackerToken}\n            style={{ backgroundImage: `url(${mapMissionStatusToToken[isPassed]})` }}\n        >\n            {missionTrackerText}\n        </div>\n    );\n};\n","/* propose */\nexport const PROPOSE = 'propose';\n\n/* round */\nexport const ROUND = 'round';\nexport const APPROVE = 'approve';\nexport const REJECT = 'reject';\n\n/* mission */\nexport const MISSION = 'mission';\nexport const PASS = 'pass';\nexport const FAIL = 'fail';\n\n/* assassinate */\nexport const ASSASSINATE = 'assassinate';\n\n/* give_excalibur */\nexport const GIVE_EXCALIBUR = 'give_excalibur';\nexport const GIVE_EXCALIBUR_TEXT = 'give excalibur';\n\n/* use_excalibur */\nexport const USE_EXCALIBUR = 'use_excalibur';\nexport const USE_EXCALIBUR_TEXT = 'use excalibur';\n\n/* skip_excalibur */\nexport const SKIP_EXCALIBUR = 'skip_excalibur';\nexport const SKIP_EXCALIBUR_TEXT = 'skip excalibur';\n\n/* confirm_excalibur */\nexport const CONFIRM_EXCALIBUR = 'confirm_excalibur';\nexport const CONFIRM_EXCALIBUR_PASS = 'confirm_excalibur_pass';\nexport const CONFIRM_EXCALIBUR_PASS_TEXT = 'Target player vote changed to pass';\nexport const CONFIRM_EXCALIBUR_FAIL = 'confirm_excalibur_fail';\nexport const CONFIRM_EXCALIBUR_FAIL_TEXT = 'Target player vote changed to fail';\n\n/* use_lotl */\nexport const USE_LOTL = 'use_lotl';\nexport const USE_LOTL_TEXT = 'inquisit';\n\n/* confirm_lotl */\nexport const CONFIRM_LOTL = 'confirm_lotl';\nexport const CONFIRM_LOTL_RESISTANCE = 'confirm_lotl_resistance';\nexport const CONFIRM_LOTL_SPY = 'confirm_lotl_spy';\nexport const CONFIRM_LOTL_RESISTANCE_TEXT = 'Player is Resistance';\nexport const CONFIRM_LOTL_SPY_TEXT = 'Player is Spy';\n","import React, { Component } from 'react';\nimport classes from './GameButtons.module.css';\nimport PropTypes from 'prop-types';\nimport { Button } from 'reactstrap';\nimport * as BUTTON_CONSTANTS from '../../../../constants/buttons';\n\nclass GameButtons extends Component {\n    state = {\n        buttonVisible: true\n    };\n\n    handleOnClick = (button, isAffirmative) => {\n        this.props.onHandleButtonClick(button, isAffirmative);\n        this.setState({\n            buttonVisible: !this.state.buttonVisible\n        });\n    };\n\n    render() {\n        const renderedGameButtons = this.state.buttonVisible\n            ? _getVisibleButtons(this.props.button, this.props.team, this.props.onHandleButtonClick, this.handleOnClick)\n            : null;\n        return <div className={classes.GameButtons}>{renderedGameButtons}</div>;\n    }\n}\n\nGameButtons.propTypes = {\n    button: PropTypes.string\n};\n\nexport default GameButtons;\n\nconst _getVisibleButtons = (button, team, onHandleButtonClick, handleOnClick) => {\n    if (button === BUTTON_CONSTANTS.ROUND) {\n        return (\n            <React.Fragment>\n                <Button\n                    color=\"success\"\n                    className={classes.GameButtonDuo}\n                    onClick={() => handleOnClick(BUTTON_CONSTANTS.ROUND, true)}\n                >\n                    {BUTTON_CONSTANTS.APPROVE}\n                </Button>\n                <Button\n                    color=\"danger\"\n                    className={classes.GameButtonDuo}\n                    onClick={() => handleOnClick(BUTTON_CONSTANTS.ROUND, false)}\n                >\n                    {BUTTON_CONSTANTS.REJECT}\n                </Button>\n            </React.Fragment>\n        );\n    } else if (button === BUTTON_CONSTANTS.MISSION) {\n        return (\n            <React.Fragment>\n                <Button\n                    color=\"success\"\n                    className={classes.GameButtonDuo}\n                    onClick={() => handleOnClick(BUTTON_CONSTANTS.MISSION, true)}\n                >\n                    {BUTTON_CONSTANTS.PASS}\n                </Button>\n                {team === 'SPY' && (\n                    <Button\n                        color=\"danger\"\n                        className={classes.GameButtonDuo}\n                        onClick={() => handleOnClick(BUTTON_CONSTANTS.MISSION, false)}\n                    >\n                        {BUTTON_CONSTANTS.FAIL}\n                    </Button>\n                )}\n            </React.Fragment>\n        );\n    } else if (button === BUTTON_CONSTANTS.PROPOSE) {\n        return (\n            <Button color=\"info\" onClick={() => handleOnClick(BUTTON_CONSTANTS.PROPOSE)}>\n                {BUTTON_CONSTANTS.PROPOSE}\n            </Button>\n        );\n    } else if (button === BUTTON_CONSTANTS.ASSASSINATE) {\n        return (\n            <Button color=\"danger\" onClick={() => handleOnClick(BUTTON_CONSTANTS.ASSASSINATE)}>\n                {BUTTON_CONSTANTS.ASSASSINATE}\n            </Button>\n        );\n    } else if (button === BUTTON_CONSTANTS.GIVE_EXCALIBUR) {\n        return (\n            <Button color=\"info\" onClick={() => handleOnClick(BUTTON_CONSTANTS.GIVE_EXCALIBUR)}>\n                {BUTTON_CONSTANTS.GIVE_EXCALIBUR_TEXT}\n            </Button>\n        );\n    } else if (button === BUTTON_CONSTANTS.USE_EXCALIBUR) {\n        return (\n            <Button color=\"info\" onClick={() => handleOnClick(BUTTON_CONSTANTS.USE_EXCALIBUR, true)}>\n                {BUTTON_CONSTANTS.USE_EXCALIBUR_TEXT}\n            </Button>\n        );\n    } else if (button === BUTTON_CONSTANTS.SKIP_EXCALIBUR) {\n        return (\n            <Button color=\"secondary\" onClick={() => handleOnClick(BUTTON_CONSTANTS.USE_EXCALIBUR, false)}>\n                {BUTTON_CONSTANTS.SKIP_EXCALIBUR_TEXT}\n            </Button>\n        );\n    } else if (button === BUTTON_CONSTANTS.CONFIRM_EXCALIBUR_PASS) {\n        return (\n            <Button color=\"warning\" onClick={() => handleOnClick(BUTTON_CONSTANTS.CONFIRM_EXCALIBUR)}>\n                {BUTTON_CONSTANTS.CONFIRM_EXCALIBUR_PASS_TEXT}\n            </Button>\n        );\n    } else if (button === BUTTON_CONSTANTS.CONFIRM_EXCALIBUR_FAIL) {\n        return (\n            <Button color=\"warning\" onClick={() => handleOnClick(BUTTON_CONSTANTS.CONFIRM_EXCALIBUR)}>\n                {BUTTON_CONSTANTS.CONFIRM_EXCALIBUR_FAIL_TEXT}\n            </Button>\n        );\n    } else if (button === BUTTON_CONSTANTS.USE_LOTL) {\n        return (\n            <Button color=\"info\" onClick={() => onHandleButtonClick(BUTTON_CONSTANTS.USE_LOTL)}>\n                {BUTTON_CONSTANTS.USE_LOTL_TEXT}\n            </Button>\n        );\n    } else if (button === BUTTON_CONSTANTS.CONFIRM_LOTL_RESISTANCE) {\n        return (\n            <Button color=\"secondary\" onClick={() => onHandleButtonClick(BUTTON_CONSTANTS.CONFIRM_LOTL)}>\n                {BUTTON_CONSTANTS.CONFIRM_LOTL_RESISTANCE_TEXT}\n            </Button>\n        );\n    } else if (button === BUTTON_CONSTANTS.CONFIRM_LOTL_SPY) {\n        return (\n            <Button color=\"secondary\" onClick={() => onHandleButtonClick(BUTTON_CONSTANTS.CONFIRM_LOTL)}>\n                {BUTTON_CONSTANTS.CONFIRM_LOTL_SPY_TEXT}\n            </Button>\n        );\n    }\n    return null;\n};\n","import React from 'react';\nimport classes from './GameBoard.module.css';\nimport PropTypes from 'prop-types';\n\nimport PlayerCard from './PlayerCard/PlayerCard';\nimport RoundTracker from './RoundTracker/RoundTracker';\nimport MissionTracker from './MissionTracker/MissionTracker';\nimport GameButtons from './GameButtons/GameButtons';\n\nconst GameBoard = props => {\n    // PlayerCards\n    let renderedPlayerCards = getPlayerCards(props);\n\n    // GameButtons\n    let renderedGameButtons = getGameButtons(props);\n\n    return (\n        <div className={classes.GameBackground}>\n            <div className={classes.GameBoard}>\n                {renderedPlayerCards}\n                <MissionTracker data={props.MISSION_TRACKER} />\n                <RoundTracker data={props.ROUND_TRACKER} />\n                {renderedGameButtons}\n            </div>\n        </div>\n    );\n};\n\nGameBoard.propTypes = {\n    /**\n     * board:\n     * [{ isLeader, isSelected, isHammer, isGivenExcalibur, isGivenLOTL, activeState, roleAppearsAs, teamAppearsAs }]\n     */\n    board: PropTypes.array,\n    button: PropTypes.string,\n    team: PropTypes.string,\n    /**\n     * MISSION_TRACKER:\n     * {\n            1: { isPassed, num_spots_on_mission, num_fails_required }\n            2: { isPassed, num_spots_on_mission, num_fails_required }\n            3: { isPassed, num_spots_on_mission, num_fails_required }\n            4: { isPassed, num_spots_on_mission, num_fails_required }\n            5: { isPassed, num_spots_on_mission, num_fails_required }\n        };\n     */\n    MISSION_TRACKER: PropTypes.object,\n    ROUND_TRACKER: PropTypes.number,\n    onClickPlayerCard: PropTypes.func,\n    onHandleButtonClick: PropTypes.func\n};\n\nexport default GameBoard;\n\nconst getPlayerCards = props => {\n    const viewBoard = props.board;\n    const renderedPlayerCards = viewBoard.map((player, player_idx) => {\n        let playerCardsData = {\n            player,\n            player_idx,\n            total_num_players: viewBoard.length,\n            onClickPlayerCard: props.onClickPlayerCard\n        };\n        return <PlayerCard key={player_idx} {...playerCardsData} />;\n    });\n    return renderedPlayerCards;\n};\n\nconst getGameButtons = props => {\n    const { button, team } = props;\n    const { onHandleButtonClick } = props;\n    const gameButtonsData = {\n        button,\n        team,\n        onHandleButtonClick\n    };\n    return <GameButtons {...gameButtonsData} key={button} />;\n};\n","import React, { Component } from 'react';\nimport classes from './GameEnterModal.module.css';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalHeader, ModalFooter } from 'reactstrap';\n\nclass GameEnterModal extends Component {\n    state = {\n        modal: true\n    };\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    onHandleJoin = () => {\n        this.props.onHandleEnter();\n        this.toggle();\n    };\n\n    onHandleSpectate = () => {\n        this.props.onHandleSpectate();\n        this.toggle();\n    };\n\n    onHandleRejoin = () => {\n        this.toggle();\n    };\n\n    render() {\n        const { room, hasStarted, isPlayerInGame } = this.props;\n\n        const buttonRejoin = (\n            <Button color=\"success\" block onClick={this.onHandleRejoin}>\n                Rejoin\n            </Button>\n        );\n\n        const buttonJoin = (\n            <Button color=\"success\" block onClick={this.onHandleJoin}>\n                Join\n            </Button>\n        );\n\n        const buttonSpectate = (\n            <Button color=\"info\" block onClick={this.onHandleSpectate}>\n                Spectate\n            </Button>\n        );\n\n        let gameEnterModalButtons = null;\n        if (hasStarted) {\n            if (isPlayerInGame) {\n                gameEnterModalButtons = buttonRejoin;\n            } else {\n                gameEnterModalButtons = buttonSpectate;\n            }\n        } else {\n            gameEnterModalButtons = (\n                <div>\n                    {buttonJoin}\n                    {buttonSpectate}\n                </div>\n            );\n        }\n        return (\n            <div>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} keyboard={false} backdrop={'static'}>\n                    <ModalHeader>Welcome to game {room}</ModalHeader>\n                    <ModalFooter className={classes.ModalFooterCustom}>{gameEnterModalButtons}</ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nGameEnterModal.propTypes = {\n    room: PropTypes.string,\n    hasStarted: PropTypes.bool,\n    isPlayerInGame: PropTypes.bool,\n    onHandleEnter: PropTypes.func,\n    onHandleSpectate: PropTypes.func\n};\n\nexport default GameEnterModal;\n","import React, { Component } from 'react';\nimport classes from './Chat.module.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Table, Input, FormGroup } from 'reactstrap';\nimport { socket } from '../../service/socket';\n\nexport class Chat extends Component {\n    state = {\n        message: '',\n        chat: []\n    };\n\n    componentDidMount() {\n        const data = { flag: 'get', room: this.props.room };\n        socket.emit('server_get_chat', data);\n        this.socketEventListeners();\n    }\n\n    socketEventListeners = () => {\n        socket.on('client_get_chat', chat => {\n            this.setState(\n                {\n                    chat\n                },\n                () => {\n                    this.changeTableScroll();\n                }\n            );\n        });\n    };\n\n    handleSubmitMessage = e => {\n        e.preventDefault();\n\n        // Don't allow submitting empty messages\n        if (this.state.message.length === 0) return;\n\n        // Send data with message to server\n        const user_name = this.props.auth && this.props.auth.user ? this.props.auth.user.name : '';\n        const data = {\n            flag: 'msg',\n            msg: this.state.message,\n            user_name: user_name,\n            room: this.props.room\n        };\n        this.setState({\n            message: ''\n        });\n        socket.emit('server_get_chat', data);\n    };\n\n    changeTableScroll = () => {\n        let objDiv = document.getElementById('chat_body_id');\n        objDiv.scrollTop = objDiv.scrollHeight;\n    };\n\n    handleKeyDown = e => {\n        if (e.key === 'Enter') {\n            this.handleSubmitMessage(e);\n        }\n    };\n\n    handleMessageChange = e => {\n        this.setState({\n            message: e.target.value\n        });\n    };\n\n    render() {\n        const renderedChatMessages = this.state.chat.map((chatObj, idx) => (\n            <tr key={idx}>\n                <td className={classes.ChatTimestamp}>{chatObj['timestamp']}</td>\n                <td className={classes.ChatUsername}>{chatObj['user_name']}</td>\n                <td className={classes.ChatMessage}>{chatObj['message']}</td>\n            </tr>\n        ));\n        return (\n            <div>\n                <Table borderless size=\"sm\" className={classes.OuterTableContainer}>\n                    <thead>\n                        <tr>\n                            <td>\n                                <Table className={classes.TableHeader}>\n                                    <thead>\n                                        <tr>\n                                            <th className={classes.ChatTimestamp}></th>\n                                            <th className={classes.ChatUsername}></th>\n                                            <th className={classes.ChatMessage}></th>\n                                        </tr>\n                                    </thead>\n                                </Table>\n                            </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <div className={classes.TableBodyContainer} id=\"chat_body_id\">\n                                    <Table className={classes.TableBody}>\n                                        <tbody>{renderedChatMessages}</tbody>\n                                    </Table>\n                                </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </Table>\n                <FormGroup>\n                    <Input\n                        type=\"textarea\"\n                        name=\"text\"\n                        placeholder=\"Enter chat message here...\"\n                        value={this.state.message}\n                        onChange={this.handleMessageChange}\n                        onKeyDown={this.handleKeyDown}\n                    />\n                </FormGroup>\n            </div>\n        );\n    }\n}\n\nChat.propTypes = {\n    auth: PropTypes.object.isRequired,\n    room: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps)(Chat);\n\n// Table Design: https://stackoverflow.com/questions/14834198/table-scroll-with-html-and-css\n// Table Auto-scroll: https://stackoverflow.com/questions/7303948/how-to-auto-scroll-to-end-of-div-when-data-is-added\n","import React, { Component } from 'react';\nimport classes from './GameTranscript.module.css';\nimport PropTypes from 'prop-types';\nimport { Table } from 'reactstrap';\n\nexport class GameTranscript extends Component {\n    changeTableScroll = () => {\n        let objDiv = document.getElementById('transcript_body_id');\n        objDiv.scrollTop = objDiv.scrollHeight;\n    };\n\n    componentDidUpdate() {\n        this.changeTableScroll();\n    }\n\n    render() {\n        const { transcript } = this.props;\n        const renderedTranscriptMessages = getMessagesFromTranscript(transcript);\n        return (\n            <div>\n                <Table borderless size=\"sm\" className={classes.OuterTableContainer}>\n                    <thead>\n                        <tr>\n                            <td>\n                                <Table className={classes.TableHeader}>\n                                    <thead>\n                                        <tr>\n                                            <th />\n                                        </tr>\n                                    </thead>\n                                </Table>\n                            </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <div className={classes.TableBodyContainer} id=\"transcript_body_id\">\n                                    <Table className={classes.TableBody}>\n                                        <tbody>{renderedTranscriptMessages}</tbody>\n                                    </Table>\n                                </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nGameTranscript.propTypes = {\n    transcript: PropTypes.array\n};\n\nexport default GameTranscript;\n\nconst getMessagesFromTranscript = transcript => {\n    if (!transcript) {\n        return [];\n    }\n\n    const transcriptMessages = transcript.map((singleMessageText, idx) => (\n        <tr key={idx}>\n            <td>{singleMessageText}</td>\n        </tr>\n    ));\n\n    return transcriptMessages;\n};\n","import React from 'react';\nimport classes from './GameVotingRecord.module.css';\nimport PropTypes from 'prop-types';\nimport { Table } from 'reactstrap';\n\nconst CHECKMARK = '\\u2713';\nconst APPROVE_COLOR = 'rgb(171, 255, 183)';\nconst REJECT_COLOR = 'rgb(255, 186, 184)';\nconst centerStyle = { textAlign: 'center' };\n\nconst GameVotingRecord = props => {\n    const { voting_record } = props;\n    const { players, record } = voting_record;\n\n    const { missionHeader, roundHeader } = getTableHeaders();\n    const tableBody = getTableBody(players, record);\n\n    const gameVotingRecordTable = (\n        <div className={classes.TableContainer}>\n            <Table dark bordered>\n                <thead>\n                    <tr key=\"mission_header\">{missionHeader}</tr>\n                    <tr key=\"round_header\">{roundHeader}</tr>\n                </thead>\n                <tbody>{tableBody}</tbody>\n            </Table>\n        </div>\n    );\n    return gameVotingRecordTable;\n};\n\nGameVotingRecord.propTypes = {\n    /**\n     * voting_record: {players: [user_name], record: {1:1:{leader, team: [true], votesRound: [false]}}}\n     */\n    voting_record: PropTypes.object\n};\n\nexport default GameVotingRecord;\n\nconst getTableHeaders = () => {\n    const order = [1, 2, 3, 4, 5];\n    const missionHeader = [\n        <th key=\"mission_header_prefix\" style={centerStyle}>\n            Mission\n        </th>\n    ];\n    const roundHeader = [\n        <th key=\"round_header_prefix\" style={centerStyle}>\n            Round\n        </th>\n    ];\n    order.forEach(missionNumber => {\n        missionHeader.push(\n            <th key={`M${missionNumber}`} colSpan={5} style={centerStyle}>\n                {missionNumber}\n            </th>\n        );\n        order.forEach(roundNumber => {\n            roundHeader.push(\n                <th key={`M${missionNumber}R${roundNumber}`} style={centerStyle}>\n                    {roundNumber}\n                </th>\n            );\n        });\n    });\n    return {\n        missionHeader,\n        roundHeader\n    };\n};\n\nconst getTableBody = (players, record) => {\n    // row by row\n    const order = [1, 2, 3, 4, 5];\n    const tableBody = [];\n    players.forEach((user_name, user_idx) => {\n        const tableRow = [];\n        tableRow.push(\n            <th key={user_idx} style={centerStyle}>\n                {user_name}\n            </th>\n        );\n        order.forEach(missionNumber => {\n            order.forEach(roundNumber => {\n                const isRoundCompleted = !!record[missionNumber][roundNumber];\n                if (isRoundCompleted) {\n                    // Push a normal game obj\n                    const currRound = record[missionNumber][roundNumber];\n                    const cellBackgroundColor = currRound.votesRound[user_idx] ? APPROVE_COLOR : REJECT_COLOR; // votesRound\n                    const cellBorder = currRound.leader === user_idx ? '3px solid black' : '1px solid'; // leader\n                    const cellContents = currRound.team[user_idx] ? CHECKMARK : ''; // team\n                    const cellStyle = {\n                        backgroundColor: cellBackgroundColor,\n                        border: cellBorder,\n                        color: 'black',\n                        textAlign: 'center'\n                    };\n                    tableRow.push(\n                        <th key={`M${missionNumber}R${roundNumber}`} style={cellStyle}>\n                            {cellContents}\n                        </th>\n                    );\n                } else {\n                    // Push a blank tile\n                    tableRow.push(<th key={`M${missionNumber}R${roundNumber}`} />);\n                }\n            });\n        });\n        tableBody.push(<tr key={user_idx}>{tableRow}</tr>);\n    });\n    return tableBody;\n};\n","import React, { Component } from 'react';\nimport classes from './GameNav.module.css';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\n\nimport GameChat from '../../../Chat/Chat';\nimport GameTranscript from './GameTranscript/GameTranscript';\nimport GameVotingRecord from './GameVotingRecord/GameVotingRecord';\n\nexport class GameNav extends Component {\n    state = {\n        activeTab: 'Transcript'\n    };\n\n    toggleActiveTab = newActiveTab => {\n        this.setState({\n            activeTab: newActiveTab\n        });\n    };\n\n    render() {\n        return (\n            <div className={classes.GameNav}>\n                <Nav tabs>\n                    <NavItem>\n                        <NavLink\n                            onClick={() => {\n                                this.toggleActiveTab('Transcript');\n                            }}\n                            className={classnames({ active: this.state.activeTab === 'Transcript' })}\n                        >\n                            Transcript\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink\n                            onClick={() => {\n                                this.toggleActiveTab('Record');\n                            }}\n                            className={classnames({ active: this.state.activeTab === 'Record' })}\n                        >\n                            Record\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink\n                            onClick={() => {\n                                this.toggleActiveTab('Chat');\n                            }}\n                            className={classnames({ active: this.state.activeTab === 'Chat' })}\n                        >\n                            Chat\n                        </NavLink>\n                    </NavItem>\n                </Nav>\n                <TabContent activeTab={this.state.activeTab}>\n                    <TabPane tabId=\"Transcript\">\n                        <GameTranscript transcript={this.props.transcript} />\n                    </TabPane>\n                    <TabPane tabId=\"Record\">\n                        <GameVotingRecord voting_record={this.props.voting_record} />\n                    </TabPane>\n                    <TabPane tabId=\"Chat\">\n                        <GameChat room={this.props.room} />\n                    </TabPane>\n                </TabContent>\n            </div>\n        );\n    }\n}\n\nGameNav.propTypes = {\n    room: PropTypes.string,\n    voting_record: PropTypes.object,\n    transcript: PropTypes.array\n};\n\nexport default GameNav;\n","const map_role_to_team = {\n    Merlin: 'RESISTANCE',\n    Percival: 'RESISTANCE',\n    DrunkMerlin: 'RESISTANCE',\n    LoyalServant: 'RESISTANCE',\n    Assassin: 'SPY',\n    Morgana: 'SPY',\n    Oberon: 'SPY',\n    Mordred: 'SPY',\n    Minion: 'SPY'\n};\n\nexport const isRolesValid = setup => {\n    // 1) Check to see if there is at least 1 RESISTANCE and 1 SPY in the game\n    const { roles, num_players } = setup;\n    let numResistanceRoles = 0;\n    let numSpyRoles = 0;\n    roles.forEach(role => {\n        if (map_role_to_team[role] === 'RESISTANCE') {\n            numResistanceRoles++;\n        } else if (map_role_to_team[role] === 'SPY') {\n            numSpyRoles++;\n        }\n    });\n    const isTwoTeams = numResistanceRoles > 0 && numSpyRoles > 0;\n\n    // 2) Check to see if less than half (strictly) of the players are SPY\n    const isLessThanHalfSPY = numSpyRoles < (num_players + 1) / 2;\n\n    // 3) Check to see if Percival and Morgana are included together (must include Merlin as well)\n    let isPercivalAndMorganaValid = true;\n    const isPercivalSelected = roles.includes('Percival');\n    const isMorganaSelected = roles.includes('Morgana');\n    const isMerlinSelected = roles.includes('Merlin');\n    if (isPercivalSelected || isMorganaSelected) {\n        isPercivalAndMorganaValid = isPercivalSelected && isMorganaSelected && isMerlinSelected;\n    }\n\n    // 4) DrunkMerlin can only be included when Merlin is included\n    let isDrunkMerlinValid = true;\n    const isDrunkMerlinSelected = roles.includes('DrunkMerlin');\n    if (isDrunkMerlinSelected) {\n        isDrunkMerlinValid = isMerlinSelected;\n    }\n\n    const isRolesValidCheck = isTwoTeams && isLessThanHalfSPY && isPercivalAndMorganaValid && isDrunkMerlinValid;\n    return isRolesValidCheck;\n};\n\nexport const isFeaturesValid = setup => {\n    return true; // for now, maybe need to limit Excalibur and LOTL\n};\n","import React, { Component } from 'react';\nimport classes from './GameSetupModal.module.css';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, CustomInput, Alert } from 'reactstrap';\n\nimport { isRolesValid, isFeaturesValid } from './GameSetupValidator/GameSetupValidator';\n\nclass GameSetupModal extends Component {\n    state = {\n        modal: false,\n        buttonDisabled: false,\n        num_roles_added: 0,\n        error_msg: null,\n        roles: {\n            Merlin: true,\n            Assassin: true,\n            Percival: true,\n            Morgana: true,\n            Mordred: false,\n            Oberon: false,\n            Minion: false,\n            DrunkMerlin: false\n        },\n        features: {\n            Excalibur: false,\n            'Lady of the Lake': false\n        }\n    };\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    onChangeCheck = (e, input) => {\n        let inputs = { ...this.state[input] };\n        inputs[e.target.name] = !inputs[e.target.name];\n        this.setState({ [input]: inputs });\n    };\n\n    check_form_validation() {\n        let num_roles_added = Object.keys(this.state.roles).filter(role => this.state.roles[role]).length;\n        return this.props.num_players - num_roles_added >= 0;\n    }\n\n    get_final_setup() {\n        // Convert object into array of roles\n        let roles = Object.keys(this.state.roles).filter(role => this.state.roles[role]);\n\n        // Add LoyalServants to fill the difference\n        let difference = Number(this.props.num_players) - Number(roles.length);\n        for (let i = 0; i < difference; i++) {\n            roles.push('LoyalServant');\n        }\n\n        const features = this.state.features;\n\n        let setup = {\n            roles,\n            features,\n            num_players: this.props.num_players\n        };\n        return setup;\n    }\n\n    onSubmit = e => {\n        e.preventDefault();\n        // Handle form validation\n        // 1) passesSanityCheck: Checks to see if number of roles added does not exceed num_players\n        const passesSanityCheck = this.check_form_validation();\n        if (!passesSanityCheck) {\n            this.setState({\n                error_msg: 'Invalid game setup. Please try again.'\n            });\n            return;\n        }\n        // 2) passesGameplayCheck: Checks to see if setup is within gameplay guidelines\n        const final_setup = this.get_final_setup();\n        const passesGameplayCheck = isRolesValid(final_setup) && isFeaturesValid(final_setup);\n        if (!passesGameplayCheck) {\n            this.setState({\n                error_msg: 'Invalid game setup. Please try again.'\n            });\n            return;\n        }\n        // Successful setup, continue with game\n        this.props.onSetup(final_setup);\n        this.setState({\n            buttonDisabled: true\n        });\n        this.toggle();\n    };\n\n    render() {\n        const role_inputs = Object.keys(this.state.roles).map((role, idx) => {\n            return (\n                <div key={idx}>\n                    <CustomInput\n                        type=\"checkbox\"\n                        id={role}\n                        name={role}\n                        label={role}\n                        onChange={e => this.onChangeCheck(e, 'roles')}\n                        checked={this.state.roles[role]}\n                    />\n                </div>\n            );\n        });\n\n        const other_inputs = Object.keys(this.state.features).map((feature, idx) => {\n            return (\n                <div key={idx}>\n                    <CustomInput\n                        type=\"checkbox\"\n                        id={feature}\n                        name={feature}\n                        label={feature}\n                        onChange={e => this.onChangeCheck(e, 'features')}\n                        checked={this.state.features[feature]}\n                    />\n                </div>\n            );\n        });\n\n        return (\n            <div>\n                <Button\n                    className={classes.Button}\n                    block\n                    disabled={this.state.buttonDisabled}\n                    color=\"dark\"\n                    onClick={this.toggle}\n                >\n                    Create Game\n                </Button>\n\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>Create a Game</ModalHeader>\n                    <ModalBody>\n                        {this.state.error_msg ? <Alert color=\"danger\">{this.state.error_msg} </Alert> : null}\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"role_selection\">Number of Players: {this.props.num_players}</Label>\n                                <hr />\n                                <Label for=\"role_selection\">Roles:</Label>\n                                {role_inputs}\n                                <hr />\n                                <Label for=\"role_selection\">Other:</Label>\n                                {other_inputs}\n                                <Button\n                                    color=\"dark\"\n                                    block\n                                    disabled={this.state.buttonDisabled}\n                                    style={{ marginTop: '2rem' }}\n                                >\n                                    Submit\n                                </Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nGameSetupModal.propTypes = {\n    num_players: PropTypes.number,\n    onSetup: PropTypes.func\n};\n\nexport default GameSetupModal;\n","import React, { Component } from 'react';\nimport { Alert, Container } from 'reactstrap';\n\nclass InvalidGamePage extends Component {\n    render() {\n        return (\n            <div>\n                <Container>\n                    <Alert color=\"danger\" style={{ marginTop: '2rem' }}>\n                        Invalid room ID. Please make sure to create the room in the lobby first.\n                    </Alert>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default InvalidGamePage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'reactstrap';\n\nconst PlayersList = props => {\n    const { players_list } = props;\n    if (!players_list || players_list.length === 0) {\n        return null;\n    }\n    return (\n        <div>\n            <hr />\n            <h3>Players</h3>\n            <hr />\n            <Table striped bordered>\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Name</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {players_list.map((playerObj, idx) => {\n                        const { user_name } = playerObj;\n                        return (\n                            <tr key={idx}>\n                                <td>{idx + 1}</td>\n                                <td>\n                                    {user_name}\n                                    {idx === 0 ? ' (Leader)' : null}\n                                </td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        </div>\n    );\n};\n\nPlayersList.propTypes = {\n    players_list: PropTypes.array\n};\n\nexport default PlayersList;\n","import React, { Component } from 'react';\nimport classes from './GameRoom.module.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { socket } from '../../service/socket';\nimport { Button, Container } from 'reactstrap';\n\nimport AccessDeniedPage from '../Pages/AccessDeniedPage/AccessDeniedPage';\nimport GameBoard from './GameBoard/GameBoard';\nimport GameEnterModal from './GameEnterModal/GameEnterModal';\nimport GameNav from './GameCommon/GameNav/GameNav';\nimport GameSetupModal from './GameSetupModal/GameSetupModal';\nimport InvalidGamePage from '../Pages/InvalidGamePage/InvalidGamePage';\nimport LoadingSpinner from '../Pages/Loading/LoadingSpinner';\nimport PlayersList from './GameCommon/PlayersList/PlayersList';\n\nexport class GameRoom extends Component {\n    state = {\n        /**\n         * purely for client-side (need to wait for socket request to come back, timeout => socket => update state)\n         */\n        isLoading: true,\n        /**\n         * if game is created on server side\n         */\n        isValid: false,\n        /**\n         * if hasLocked, show GameSetupModal\n         */\n        hasLocked: false,\n        /**\n         * if hasSetup, show StartGame\n         */\n        hasSetup: false,\n        /**\n         * if !hasStarted, show PlayersList\n         */\n        hasStarted: false,\n        /**\n         * isRoomLeader is the first person in the players list\n         */\n        isRoomLeader: false,\n        /**\n         * single view - board\n         */\n        board: null,\n        /**\n         * button can be { propose, round, mission, assassinate }\n         */\n        button: null,\n        /**\n         * team is either RESISTANCE or SPY\n         */\n        team: null,\n\n        /**\n         * PLAYERS_LIST list of players before game has started\n         */\n        PLAYERS_LIST: null,\n\n        /**\n         * MISSION_TRACKER tracks mission pass/fails\n         */\n        MISSION_TRACKER: null,\n\n        /**\n         * ROUND_TRACKER tracks rounds\n         */\n        ROUND_TRACKER: null,\n\n        /**\n         * VOTING_RECORD tracks voting through all rounds and missions\n         */\n        VOTING_RECORD: null,\n\n        /**\n         * TRANSCRIPT records all the actions played within the game\n         */\n        TRANSCRIPT: null\n    };\n\n    componentDidMount() {\n        this.onHandleInitialize();\n        this.socket_event_listeners();\n        window.addEventListener('beforeunload', this.onLeaveRoom);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.onLeaveRoom); // remove the event handler for normal unmounting\n    }\n\n    _get_user_id = () => {\n        const user_id = this.props.auth && this.props.auth.user ? this.props.auth.user.id : null;\n        return user_id;\n    };\n\n    _get_room_id = () => {\n        const room_id = this.props.match.params.room_id;\n        return room_id;\n    };\n\n    _get_room_pwd = () => {\n        const { is_public } = this.props;\n        if (is_public) {\n            // No room_pwd for public games\n            return null;\n        } else {\n            return this.props.match.params.pwd;\n        }\n    };\n\n    socket_event_listeners = () => {\n        socket.on('client_game_view_data', data => {\n            const { isValid, hasLocked, hasSetup, hasStarted, hasEnded, roomLeaderId } = data;\n            const { boards, buttons, teams } = data;\n            const { PLAYERS_LIST, MISSION_TRACKER, ROUND_TRACKER, VOTING_RECORD, TRANSCRIPT } = data;\n\n            const user_id = this._get_user_id();\n            let board = null;\n            let button = null;\n            let team = null;\n            if (boards) {\n                board = boards[user_id] ? boards[user_id] : boards['spectate'];\n            }\n            if (buttons) {\n                button = buttons[user_id] ? buttons[user_id] : null;\n            }\n            if (teams) {\n                team = teams[user_id] ? teams[user_id] : null;\n            }\n            const isRoomLeader = user_id === roomLeaderId;\n            this.setState({\n                isLoading: false,\n                isValid,\n                //\n                hasLocked,\n                hasSetup,\n                hasStarted,\n                hasEnded,\n                isRoomLeader,\n                // Single\n                board,\n                button,\n                team,\n                // Common\n                PLAYERS_LIST,\n                MISSION_TRACKER,\n                ROUND_TRACKER,\n                VOTING_RECORD,\n                TRANSCRIPT\n            });\n        });\n        socket.on('client_game_invalid_or_unauthorized', () => {\n            this.setState({\n                isLoading: false\n            });\n        });\n    };\n\n    onHandleInitialize() {\n        setTimeout(() => {\n            const user_id = this._get_user_id();\n            const room_id = this._get_room_id();\n            const room_pwd = this._get_room_pwd();\n            const data = {\n                user_id,\n                room_id,\n                room_pwd\n            };\n            socket.emit('server_game_handle_INITIALIZE', data);\n        }, 1000);\n    }\n\n    onHandleEnter = () => {\n        const user_id = this._get_user_id();\n        const user_name = this.props.auth && this.props.auth.user ? this.props.auth.user.name : null;\n        const room_id = this._get_room_id();\n        const room_pwd = this._get_room_pwd();\n\n        const data = {\n            user_id,\n            user_name,\n            room_id,\n            room_pwd\n        };\n        socket.emit('server_game_handle_ENTER', data);\n    };\n\n    onHandleSpectate = () => {\n        const user_id = this._get_user_id();\n        const room_id = this._get_room_id();\n        const room_pwd = this._get_room_pwd();\n        const data = {\n            user_id,\n            room_id,\n            room_pwd\n        };\n        socket.emit('server_game_handle_SPECTATE', data);\n    };\n\n    onLeaveRoom = () => {\n        const room_id = this._get_room_id();\n        const user_id = this._get_user_id();\n        const room_pwd = this._get_room_pwd();\n\n        const data = {\n            user_id,\n            room_id,\n            room_pwd\n        };\n        socket.emit('server_game_handle_LEAVE', data);\n    };\n\n    onLockRoom = () => {\n        const room_id = this._get_room_id();\n        const user_id = this._get_user_id();\n        const room_pwd = this._get_room_pwd();\n\n        const data = {\n            user_id,\n            room_id,\n            room_pwd\n        };\n        socket.emit('server_game_handle_LOCK', data);\n    };\n\n    onSetup = setup => {\n        const room_id = this._get_room_id();\n        const user_id = this._get_user_id();\n        const room_pwd = this._get_room_pwd();\n\n        const data = {\n            user_id,\n            room_id,\n            room_pwd,\n            setup\n        };\n        socket.emit('server_game_handle_SETUP', data);\n    };\n\n    onStart = () => {\n        const user_id = this._get_user_id();\n        const room_id = this._get_room_id();\n        const room_pwd = this._get_room_pwd();\n\n        const data = {\n            user_id,\n            room_id,\n            room_pwd\n        };\n        socket.emit('server_game_handle_START', data);\n    };\n\n    onClickPlayerCard = target_idx => {\n        const room_id = this._get_room_id();\n        const user_id = this._get_user_id();\n        const room_pwd = this._get_room_pwd();\n\n        const data = {\n            user_id,\n            room_id,\n            room_pwd,\n            target_idx\n        };\n        socket.emit('server_game_handle_SELECT', data);\n    };\n\n    onHandleButtonClick = (button, isAffirmative) => {\n        const room_id = this._get_room_id();\n        const user_id = this._get_user_id();\n        const room_pwd = this._get_room_pwd();\n\n        const data = {\n            user_id,\n            room_id,\n            room_pwd\n        };\n        if (button === 'propose') {\n            socket.emit('server_game_handle_PROPOSE', data);\n        } else if (button === 'round') {\n            data.isApproved = isAffirmative;\n            socket.emit('server_game_handle_ROUND', data);\n        } else if (button === 'mission') {\n            data.isPassed = isAffirmative;\n            socket.emit('server_game_handle_MISSION', data);\n        } else if (button === 'assassinate') {\n            socket.emit('server_game_handle_ASSASSINATE', data);\n        } else if (button === 'give_excalibur') {\n            socket.emit('server_game_handle_GIVE_EXCALIBUR', data);\n        } else if (button === 'use_excalibur') {\n            data.isExcaliburUsed = isAffirmative;\n            socket.emit('server_game_handle_USE_EXCALIBUR', data);\n        } else if (button === 'confirm_excalibur') {\n            socket.emit('server_game_handle_CONFIRM_EXCALIBUR', data);\n        } else if (button === 'use_lotl') {\n            socket.emit('server_game_handle_USE_LOTL', data);\n        } else if (button === 'confirm_lotl') {\n            socket.emit('server_game_handle_CONFIRM_LOTL', data);\n        }\n    };\n\n    _getIsPlayerInGame = () => {\n        // If PLAYERS_LIST contains user_id\n        const { PLAYERS_LIST } = this.state;\n        if (!PLAYERS_LIST) {\n            return false;\n        }\n        const user_id = this._get_user_id();\n        const arrPlayerWithUserId = PLAYERS_LIST.filter(playerObj => {\n            return playerObj.user_id === user_id;\n        });\n        const isPlayerInGame = arrPlayerWithUserId.length > 0;\n        return isPlayerInGame;\n    };\n\n    _getRoomLeaderButton = () => {\n        const { hasLocked, hasSetup, hasStarted, isRoomLeader, PLAYERS_LIST } = this.state;\n        let roomLeaderButton = null;\n        if (isRoomLeader) {\n            const needWaitToLock = PLAYERS_LIST && (PLAYERS_LIST.length < 5 || PLAYERS_LIST.length > 12);\n            const needLock = !hasLocked;\n            const needSetup = hasLocked && !hasSetup;\n            const needStart = hasSetup && !hasStarted;\n            if (needLock) {\n                roomLeaderButton = (\n                    <Button\n                        className={classes.Button}\n                        block\n                        disabled={needWaitToLock}\n                        color=\"warning\"\n                        onClick={this.onLockRoom}\n                    >\n                        Lock\n                    </Button>\n                );\n            } else if (needSetup) {\n                roomLeaderButton = (\n                    <GameSetupModal num_players={this.state.PLAYERS_LIST.length} onSetup={this.onSetup} />\n                );\n            } else if (needStart) {\n                roomLeaderButton = (\n                    <Button className={classes.Button} block color=\"success\" onClick={this.onStart}>\n                        Start\n                    </Button>\n                );\n            }\n        }\n        return roomLeaderButton;\n    };\n\n    render() {\n        // Check if loading\n        const { isLoading } = this.state;\n        if (isLoading) {\n            return <LoadingSpinner />;\n        }\n\n        // Check if authenticated\n        const { isAuthenticated } = this.props.auth;\n        if (!isAuthenticated) {\n            return <AccessDeniedPage />;\n        }\n\n        // Check if valid game\n        const { isValid } = this.state;\n        if (!isValid) {\n            return <InvalidGamePage />;\n        }\n\n        const { PLAYERS_LIST, MISSION_TRACKER, ROUND_TRACKER, VOTING_RECORD, TRANSCRIPT } = this.state;\n        const { board, button, team } = this.state;\n        const { hasStarted } = this.state;\n        const room_id = this._get_room_id();\n        const roomLeaderButton = this._getRoomLeaderButton();\n\n        const preGameComponents = !hasStarted ? (\n            <Container>\n                {roomLeaderButton}\n                <PlayersList players_list={PLAYERS_LIST} />\n            </Container>\n        ) : null;\n        const gameComponents = hasStarted ? (\n            <div>\n                <GameBoard\n                    onClickPlayerCard={this.onClickPlayerCard}\n                    onHandleButtonClick={this.onHandleButtonClick}\n                    board={board}\n                    button={button}\n                    team={team}\n                    MISSION_TRACKER={MISSION_TRACKER}\n                    ROUND_TRACKER={ROUND_TRACKER}\n                />\n                <GameNav room={room_id} voting_record={VOTING_RECORD} transcript={TRANSCRIPT} />\n            </div>\n        ) : null;\n\n        return (\n            <div>\n                <GameEnterModal\n                    room={room_id}\n                    hasStarted={hasStarted}\n                    isPlayerInGame={this._getIsPlayerInGame()}\n                    onHandleEnter={this.onHandleEnter}\n                    onHandleSpectate={this.onHandleSpectate}\n                />\n                {preGameComponents}\n                {gameComponents}\n            </div>\n        );\n    }\n}\n\nGameRoom.propTypes = {\n    auth: PropTypes.object.isRequired,\n    is_public: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, null)(GameRoom);\n","import React, { Component, Fragment } from 'react';\nimport classes from './LobbyModal.module.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, Alert } from 'reactstrap';\nimport { socket } from '../../../service/socket';\n\nconst DEFAULT_STATE = {\n    modal: false,\n    room_id: null, // Ex. \"123456\"\n    room_pwd: null, // Ex. \"abcdef\"\n    is_public: true,\n    is_rated: false,\n    isCreated: false,\n    success_msg: null,\n    buttonDisabled: false\n};\n\nexport class LobbyModal extends Component {\n    state = DEFAULT_STATE;\n\n    toggle = () => {\n        // Reset everything\n        this.setState({\n            ...DEFAULT_STATE,\n            modal: !this.state.modal\n        });\n    };\n\n    handleClickPublic = is_public => {\n        this.setState({\n            is_public\n        });\n    };\n\n    handleClickRated = is_rated => {\n        this.setState({\n            is_rated\n        });\n    };\n\n    _generateArrBetweenEnds = (lower, upper) => {\n        const arrBetweenEnds = [];\n        for (let i = lower; i < upper; i++) {\n            arrBetweenEnds.push(i.toString());\n        }\n        return arrBetweenEnds;\n    };\n\n    _generateRandomRoomID = lengthLimit => {\n        let room_id = '';\n        const characters = '0123456789';\n        const charactersLength = characters.length;\n        for (let i = 0; i < lengthLimit; i++) {\n            room_id += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return room_id;\n    };\n\n    /**\n     * Generates a random 6 letter password\n     */\n    _generateRandomRoomPassword = lengthLimit => {\n        let room_pwd = '';\n        const characters = 'abcdefghijklmnopqrstuvwxyz';\n        const charactersLength = characters.length;\n        for (let i = 0; i < lengthLimit; i++) {\n            room_pwd += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return room_pwd;\n    };\n\n    /**\n     * Original: 1000\n     * New1: 130\n     * New2:\n     */\n    onSubmit = e => {\n        e.preventDefault();\n        const { is_public, is_rated } = this.state;\n        // 1) Generate room_id and room_pwd on client-side\n        const room_id = this._generateRandomRoomID(6);\n        let room_pwd = null;\n        if (is_public) {\n            this.setState({\n                room_id,\n                room_pwd,\n                isCreated: true,\n                success_msg: `Your room ID is ${room_id}`,\n                buttonDisabled: true\n            });\n        } else {\n            room_pwd = this._generateRandomRoomPassword(6);\n            this.setState({\n                room_id,\n                room_pwd,\n                isCreated: true,\n                success_msg: `Your room ID is ${room_id} and your password is \"${room_pwd}\"`,\n                buttonDisabled: true\n            });\n        }\n        // 2) Send data to server for Avalon to track\n        const user_id = this.props.auth && this.props.auth.user ? this.props.auth.user.id : null;\n        const data = {\n            user_id,\n            room_id,\n            room_pwd,\n            is_public,\n            is_rated\n        };\n        socket.emit('server_game_handle_CREATE', data);\n    };\n\n    render() {\n        const toggleModalButton = (\n            <Button color=\"success\" className={classes.ToggleLobbyModalButton} onClick={this.toggle}>\n                Create a Room\n            </Button>\n        );\n\n        const { modal, room_id, room_pwd, is_public, is_rated, isCreated, success_msg, buttonDisabled } = this.state;\n        const settingRadioButtons = (\n            <Fragment>\n                <FormGroup check>\n                    <Label check>\n                        <Input\n                            checked={is_public}\n                            type=\"radio\"\n                            name=\"radio_public_private\"\n                            onChange={() => this.handleClickPublic(true)}\n                        />\n                        Public\n                    </Label>\n                </FormGroup>\n                <FormGroup check>\n                    <Label check>\n                        <Input\n                            checked={!is_public}\n                            type=\"radio\"\n                            name=\"radio_public_private\"\n                            onChange={() => this.handleClickPublic(false)}\n                        />\n                        Private\n                    </Label>\n                </FormGroup>\n            </Fragment>\n        );\n        const typeRadioButtons = (\n            <Fragment>\n                <FormGroup check>\n                    <Label check>\n                        <Input\n                            checked={!is_rated}\n                            type=\"radio\"\n                            name=\"radio_rated_unrated\"\n                            onChange={() => this.handleClickRated(false)}\n                        />\n                        Unrated\n                    </Label>\n                </FormGroup>\n                <FormGroup check>\n                    <Label check>\n                        <Input\n                            checked={is_rated}\n                            type=\"radio\"\n                            name=\"radio_rated_unrated\"\n                            onChange={() => this.handleClickRated(true)}\n                        />\n                        Rated\n                    </Label>\n                </FormGroup>\n            </Fragment>\n        );\n\n        const createRoomButton = (\n            <Button color=\"dark\" block disabled={buttonDisabled} className={classes.CreateRoomButton}>\n                Create Room\n            </Button>\n        );\n        const successMsg = isCreated ? (\n            <Alert className=\"mt-3\" color=\"success\">\n                {success_msg}\n            </Alert>\n        ) : null;\n\n        const gameLinkButton = (\n            <Fragment>\n                {isCreated && is_public && (\n                    <Link to={`/game/${room_id}`}>\n                        <Button color=\"success\" style={{ marginTop: '2rem' }} block>\n                            Join Public Room\n                        </Button>\n                    </Link>\n                )}\n                {isCreated && !is_public && (\n                    <Link to={`/game/${room_id}/pwd/${room_pwd}`}>\n                        <Button color=\"success\" style={{ marginTop: '2rem' }} block>\n                            Join Private Room\n                        </Button>\n                    </Link>\n                )}\n            </Fragment>\n        );\n\n        return (\n            <div>\n                {toggleModalButton}\n                <Modal isOpen={modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>Create a Room</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmit}>\n                            {settingRadioButtons}\n                            <hr />\n                            {typeRadioButtons}\n                            <hr />\n                            {createRoomButton}\n                            {successMsg}\n                            {gameLinkButton}\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nLobbyModal.propTypes = {\n    auth: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, null)(LobbyModal);\n","import React, { Component } from 'react';\nimport classes from './LobbyPrivateRoomModal.module.css';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Button, Input, Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nclass LobbyPrivateRoomModal extends Component {\n    state = {\n        modal: false,\n        enteredPassword: '',\n        enterButtonDisabled: true\n    };\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    handleEnterPassword = event => {\n        const { value: enteredPassword } = event.target;\n        const enterButtonDisabled = enteredPassword.length !== 6;\n        this.setState({\n            enteredPassword,\n            enterButtonDisabled\n        });\n    };\n\n    render() {\n        const { buttonName, buttonColor, room_id } = this.props;\n        const { modal, enteredPassword, enterButtonDisabled } = this.state;\n        return (\n            <div>\n                <Button color={buttonColor} className={classes.LobbyTableButton} onClick={this.toggle}>\n                    {buttonName}\n                </Button>\n                <Modal isOpen={modal} toggle={this.toggle}>\n                    <ModalHeader>Please enter the password for private room {room_id}</ModalHeader>\n                    <ModalBody>\n                        <Input\n                            type=\"text\"\n                            maxLength={6}\n                            value={enteredPassword}\n                            placeholder=\"Enter password...\"\n                            onChange={this.handleEnterPassword}\n                        />\n                        <br />\n                        <Link to={`game/${room_id}/pwd/${enteredPassword}`}>\n                            <Button color={buttonColor} block disabled={enterButtonDisabled}>\n                                {buttonName}\n                            </Button>\n                        </Link>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nLobbyPrivateRoomModal.propTypes = {\n    room_id: PropTypes.string.isRequired,\n    buttonName: PropTypes.string.isRequired,\n    buttonColor: PropTypes.string.isRequired\n};\n\nexport default LobbyPrivateRoomModal;\n","import React from 'react';\nimport classes from './LobbyTable.module.css';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Button, Table } from 'reactstrap';\n\nimport LobbyPrivateRoomModal from './LobbyPrivateRoomModal/LobbyPrivateRoomModal';\n\nconst LobbyTable = props => {\n    let table_body = (\n        <tr key=\"single\">\n            <th colSpan=\"7\" className={classes.LobbyTableCell}>\n                No games in progress. Try making one!\n            </th>\n        </tr>\n    );\n\n    if (props.lobby_data.length > 0) {\n        table_body = props.lobby_data.map((room_data, idx) => {\n            const { room_id, is_public, is_rated, num_players, hasLocked, hasEnded } = room_data;\n            const isPublicSetting = is_public ? 'public' : 'private';\n            const isRated = is_rated ? 'rated' : 'unrated';\n            const gameStatus = getGameStatus(hasLocked, hasEnded);\n            const tableButton = getTableButton(is_public, gameStatus, room_id);\n            return (\n                <tr key={idx}>\n                    <th className={classes.LobbyTableCell} scope=\"row\">\n                        {idx + 1}\n                    </th>\n                    <td className={classes.LobbyTableCell}>{room_id}</td>\n                    <td className={classes.LobbyTableCell}>{isPublicSetting}</td>\n                    <td className={classes.LobbyTableCell}>{isRated}</td>\n                    <td className={classes.LobbyTableCell}>{num_players} / 12</td>\n                    <td className={classes.LobbyTableCell}>{gameStatus}</td>\n                    <td className={classes.LobbyTableCell}>{tableButton}</td>\n                </tr>\n            );\n        });\n    }\n    return (\n        <div className={classes.TableContainer}>\n            <Table dark>\n                <thead>\n                    <tr>\n                        <th className={classes.LobbyTableCell}>#</th>\n                        <th className={classes.LobbyTableCell}>Game ID</th>\n                        <th className={classes.LobbyTableCell}>Setting</th>\n                        <th className={classes.LobbyTableCell}>Type</th>\n                        <th className={classes.LobbyTableCell}>Capacity</th>\n                        <th className={classes.LobbyTableCell}>Status</th>\n                        <th className={classes.LobbyTableCell}>Action</th>\n                    </tr>\n                </thead>\n                <tbody>{table_body}</tbody>\n            </Table>\n        </div>\n    );\n};\n\nLobbyTable.propTypes = {\n    /**\n     * [room_id, is_public, is_rated, creation_time, hasStarted, hasEnded, hasLocked, num_players]\n     */\n    lobby_data: PropTypes.array\n};\nexport default LobbyTable;\n\nconst getGameStatus = (hasLocked, hasEnded) => {\n    if (!hasLocked) {\n        return 'waiting';\n    }\n    if (!hasEnded) {\n        return 'in progress';\n    }\n    return 'finished';\n};\n\nconst getTableButton = (is_public, gameStatus, room_id) => {\n    if (is_public) {\n        // PUBLIC\n        if (gameStatus === 'waiting') {\n            return (\n                <Link to={`game/${room_id}`}>\n                    <Button color=\"success\">Join</Button>\n                </Link>\n            );\n        } else if (gameStatus === 'in progress' || gameStatus === 'finished') {\n            return (\n                <Link to={`game/${room_id}`}>\n                    <Button color=\"info\">Spectate</Button>\n                </Link>\n            );\n        }\n    } else {\n        // PRIVATE\n        if (gameStatus === 'waiting') {\n            return <LobbyPrivateRoomModal buttonName=\"Join\" buttonColor=\"success\" room_id={room_id} />;\n        } else if (gameStatus === 'in progress' || gameStatus === 'finished') {\n            return <LobbyPrivateRoomModal buttonName=\"Spectate\" buttonColor=\"info\" room_id={room_id} />;\n        }\n    }\n};\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport classes from './LobbyPage.module.css';\nimport { socket } from '../../service/socket';\n\nimport Chat from '../Chat/Chat';\nimport LobbyModal from './LobbyModal/LobbyModal';\nimport LobbyTable from './LobbyTable/LobbyTable';\n\nclass LobbyPage extends Component {\n    state = {\n        lobby_data: []\n    };\n\n    componentDidMount() {\n        socket.emit('server_game_lobby_data');\n        socket.on('client_game_lobby_data', data => {\n            this.setState({\n                lobby_data: data\n            });\n        });\n    }\n    render() {\n        const chatHeader = (\n            <div>\n                <hr />\n                <h3>Chat</h3>\n                <hr />\n            </div>\n        );\n\n        const lobbyHeader = (\n            <div>\n                <hr></hr>\n                <h3>Game Lobby</h3>\n                <hr></hr>\n            </div>\n        );\n        return (\n            <div className={classes.LobbyPageContainer}>\n                <Container>\n                    {chatHeader}\n                    <Chat room={'lobby'} />\n                    {lobbyHeader}\n                    <LobbyModal />\n                    <LobbyTable lobby_data={this.state.lobby_data} />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default LobbyPage;\n","import React from 'react';\nimport classes from './WelcomePage.module.css';\n\nconst WelcomePage = () => {\n    const spacing = (\n        <div>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n        </div>\n    );\n    return (\n        <div className={classes.OuterContainer}>\n            <div className={classes.InnerContainer}>\n                {spacing}\n                <div className={classes.InnerText}>\n                    Welcome to The Resistance: Avalon\n                    <br></br>\n                    <div className={classes.SubText}>Please register and log in to play</div>\n                </div>\n                <div className={classes.DisclaimerText}>\n                    This is not affiliated with the official creators of \"The Resistance: Avalon\" game. This was purely\n                    a hobby project, from enthusiasts of the game.\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default WelcomePage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport LobbyPage from '../../Lobby/LobbyPage';\nimport WelcomePage from '../WelcomePage/WelcomePage';\n\nclass HomePage extends Component {\n    render() {\n        return this.props.isAuthenticated ? <LobbyPage /> : <WelcomePage />;\n    }\n}\n\nHomePage.propTypes = {\n    isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, null)(HomePage);\n","import React from 'react';\nimport classes from './CharacterCard.module.css';\nimport PropTypes from 'prop-types';\n\nconst CharacterCard = props => {\n    const { avatar, name, team, description } = props;\n    return (\n        <div className={classes.CharacterCardContainer}>\n            <div className={classes.CharacterCardImageContainer}>\n                <img src={avatar} alt=\"Avatar\" className={classes.CharacterCardImage} />\n            </div>\n            <div className={classes.CharacterCardTextContainer}>\n                <h4>\n                    <b>{name}</b>\n                </h4>\n                <ul>\n                    <li key={'team'}>Team: {team}</li>\n                    {description.map((descriptionPoint, idx) => (\n                        <li key={idx}>{descriptionPoint}</li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nCharacterCard.propTypes = {\n    avatar: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    team: PropTypes.string.isRequired,\n    description: PropTypes.array.isRequired\n};\n\nexport default CharacterCard;\n","import React from 'react';\nimport classes from './CharacterCards.module.css';\n\nimport {\n    Assassin,\n    DrunkMerlin,\n    LoyalServant,\n    Merlin,\n    Minion,\n    Mordred,\n    Morgana,\n    Oberon,\n    Percival\n} from '../../../../media/RoleAvatars';\nimport CharacterCard from './CharacterCard/CharacterCard';\n\nconst CharacterCards = () => {\n    const characterCardsProps = getCharacterCardsProps();\n    return (\n        <div className={classes.CharacterCardsContainer}>\n            {characterCardsProps.map(characterCardProps => (\n                <CharacterCard {...characterCardProps} />\n            ))}\n        </div>\n    );\n};\n\nexport default CharacterCards;\n\nconst getCharacterCardsProps = () => [\n    {\n        avatar: LoyalServant,\n        name: 'Loyal Servant',\n        team: 'Resistance',\n        description: ['Has no special powers']\n    },\n    {\n        avatar: Merlin,\n        name: 'Merlin',\n        team: 'Resistance',\n        description: ['Sees all Spies except for Mordred', 'Must stay discrete to Spies']\n    },\n    {\n        avatar: Percival,\n        name: 'Percival',\n        team: 'Resistance',\n        description: ['Sees both Merlin and Morgana as possibly Merlin', 'Must stay vigilant and careful']\n    },\n    {\n        avatar: Minion,\n        name: 'Minion',\n        team: 'Spy',\n        description: ['No extra powers beyond seeing other Spies (besides Oberon)']\n    },\n    {\n        avatar: Assassin,\n        name: 'Assassin',\n        team: 'Spy',\n        description: ['Decides who to assassinate at the end of the game']\n    },\n    {\n        avatar: Morgana,\n        name: 'Morgana',\n        team: 'Spy',\n        description: ['Seen by Percival as a potential Merlin', 'Must try to deceive Percival']\n    },\n    {\n        avatar: Mordred,\n        name: 'Mordred',\n        team: 'Spy',\n        description: ['Remains hidden to Merlin', 'Must try to pass off as Resistance']\n    },\n    {\n        avatar: Oberon,\n        name: 'Oberon',\n        team: 'Spy',\n        description: ['Remains hidden to other Spies but is known by Merlin', 'A wildcard to add extra chaos']\n    },\n    {\n        avatar: DrunkMerlin,\n        name: 'Drunk Merlin',\n        team: 'Resistance',\n        description: ['Sees himself as Merlin', 'Sees the same number of Spies as Merlin', 'Maximum chaos']\n    }\n];\n","import React from 'react';\nimport classes from './FeatureCard.module.css';\nimport PropTypes from 'prop-types';\n\nconst FeatureCard = props => {\n    const { name, description } = props;\n    return (\n        <div className={classes.FeatureCardContainer}>\n            <div className={classes.FeatureCardHeaderContainer}>\n                {/* <img src={avatar} alt=\"Avatar\" className={classes.CharacterCardImage} /> */}\n                {/* <div>Excalibur</div> */}\n                <h1>{name}</h1>\n            </div>\n            <div className={classes.FeatureCardTextContainer}>\n                <ul>\n                    {description.map((descriptionPoint, idx) => (\n                        <li key={idx}>{descriptionPoint}</li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nFeatureCard.propTypes = {\n    name: PropTypes.string.isRequired,\n    description: PropTypes.array.isRequired\n};\n\nexport default FeatureCard;\n","import React from 'react';\nimport FeatureCard from './FeatureCard/FeatureCard';\n\nconst FeatureCards = () => {\n    const featureCardsProps = getFeatureCardsProps();\n    return (\n        <div>\n            {featureCardsProps.map(featureCardProps => (\n                <FeatureCard {...featureCardProps} />\n            ))}\n        </div>\n    );\n};\n\nexport default FeatureCards;\n\nconst getFeatureCardsProps = () => [\n    {\n        name: 'Excalibur',\n        description: [\n            'Leader chooses a member of the proposed team to grant the power of Excalibur',\n            'If the team is approved, the player granted Excalibur can choose to flip the vote of a target player after the mission',\n            'If the player granted Excalibur chooses to use Excalibur, the player can see the original vote of the target player'\n        ]\n    },\n    {\n        name: 'Lady of the Lake',\n        description: [\n            'At the start of the game, the Lady of the Lake token is granted to the player sitting to the right of the leader',\n            'At the end of missions 2, 3, and 4, the player granted the Lady of the Lake selects a player in the game to inquisit',\n            'The player inquisited by the Lady of the Lake must reveal their true team to the granted player',\n            'No player who used Lady of the Lake may have Lady of the Lake used on them'\n        ]\n    },\n    {\n        name: 'Public vs. Private Games',\n        description: [\n            'Ongoing public games and private games are both shown in the main lobby',\n            'Private games require a password to enter',\n            'Spectators may spectate both public and private games (can spectate private games if they have the password)'\n        ]\n    },\n    {\n        name: 'Rated Games',\n        description: [\n            'Setting the game as \"Rated\" will affect every player in the game',\n            'Rating system is based on the ELO system, using the average ELO of each team',\n            'Rated games that are abandoned will negatively impact the ELO of players of both teams'\n        ]\n    }\n];\n","import React, { Fragment } from 'react';\nimport classes from './RulesPage.module.css';\nimport { Container } from 'reactstrap';\nimport CharacterCards from './CharacterCards/CharacterCards';\nimport FeatureCards from './FeatureCards/FeatureCards';\n\nconst RulesPage = () => {\n    return (\n        <div className={classes.AboutPage}>\n            <Container>\n                {charactersSection}\n                {featuresSection}\n                {rulesSection}\n            </Container>\n        </div>\n    );\n};\n\nexport default RulesPage;\n\nconst charactersSection = (\n    <Fragment>\n        <hr />\n        <h3>Characters</h3>\n        <hr />\n        <CharacterCards />\n    </Fragment>\n);\n\nconst featuresSection = (\n    <Fragment>\n        <hr />\n        <h3>Features</h3>\n        <hr />\n        <FeatureCards />\n    </Fragment>\n);\n\nconst rulesSection = (\n    <Fragment>\n        <div>\n            <hr />\n            <h3>Rules</h3>\n            <hr />\n            <p>\n                The rules of Avalon are explained nicely in this\n                <a\n                    href=\"http://upload.snakesandlattes.com/rules/r/ResistanceAvalon.pdf\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    {' '}\n                    guide{' '}\n                </a>{' '}\n                and video here:\n            </p>\n            <div className={classes.RulesVideoContainer}>\n                <iframe\n                    title=\"The Resistance: Avalon - How To Play\"\n                    className=\"mb-3 mt-3 \"\n                    src=\"https://www.youtube.com/embed/rXlK3NZjLGc\"\n                ></iframe>\n            </div>\n        </div>\n    </Fragment>\n);\n","import React from 'react';\nimport classes from './StatsIndividualByRoles.module.css';\nimport PropTypes from 'prop-types';\nimport { Table } from 'reactstrap';\n\nconst COLOR_BLUE = { color: '#7EC8E3' };\nconst COLOR_RED = { color: '#ff726f' };\n\nconst StatsIndividualByRoles = props => {\n    const { byRoles } = props;\n    const loadingRow = (\n        <tr key=\"loading\">\n            <th colSpan=\"6\" className={classes.CellCenterText}>\n                Stats are loading...\n            </th>\n        </tr>\n    );\n    const noDataRow = (\n        <tr key=\"noData\">\n            <th colSpan=\"6\" className={classes.CellCenterText}>\n                No stats to show. Please play more games to see.\n            </th>\n        </tr>\n    );\n    const placeholderRow = byRoles ? noDataRow : loadingRow;\n    const tableBody = byRoles && byRoles.length > 0 ? getTableBodyRows(byRoles) : placeholderRow;\n\n    const byRolesTable = (\n        <div className={classes.TableContainer}>\n            <Table dark>\n                <thead>\n                    <tr>\n                        <th className={classes.CellCenterText}>#</th>\n                        <th className={classes.CellCenterText}>Team</th>\n                        <th className={classes.CellCenterText}>Role</th>\n                        <th className={classes.CellCenterText}>Games Won</th>\n                        <th className={classes.CellCenterText}>Games Played</th>\n                        <th className={classes.CellCenterText}>Win %</th>\n                    </tr>\n                </thead>\n                <tbody>{tableBody}</tbody>\n            </Table>\n        </div>\n    );\n    return <div>{byRolesTable}</div>;\n};\n\nStatsIndividualByRoles.propTypes = {\n    byRoles: PropTypes.array\n};\n\nexport default StatsIndividualByRoles;\n\nconst map_team_to_color = {\n    RESISTANCE: COLOR_BLUE,\n    SPY: COLOR_RED\n};\n\nconst getTableBodyRows = byRoles => {\n    const tableBodyRows = byRoles.map((singleRowData, idx) => {\n        const { team, role, games_won, games_played } = singleRowData;\n        const win_percentage = getWinPercentage(games_won, games_played);\n        const colorTeamAndRole = map_team_to_color[team];\n        return (\n            <tr key={idx + 1}>\n                <td className={classes.CellCenterText}>{idx + 1}</td>\n                <td className={classes.CellCenterText} style={colorTeamAndRole}>\n                    {team}\n                </td>\n                <td className={classes.CellCenterText} style={colorTeamAndRole}>\n                    {role}\n                </td>\n                <td className={classes.CellCenterText}>{games_won}</td>\n                <td className={classes.CellCenterText}>{games_played}</td>\n                <td className={classes.CellCenterText}>{win_percentage}</td>\n            </tr>\n        );\n    });\n\n    return tableBodyRows;\n};\n\nconst getWinPercentage = (games_won, games_played) => {\n    // Round to 1 decimal place\n    if (games_played === 0) return 0;\n    const win_percentage = parseInt(Math.round((games_won / games_played) * 1000)) / 10;\n    return win_percentage;\n};\n","import React from 'react';\nimport classes from './StatsIndividualHistory.module.css';\nimport PropTypes from 'prop-types';\nimport { Table } from 'reactstrap';\n\nconst COLOR_BLUE = { color: '#7EC8E3' };\nconst COLOR_GREEN = { color: '#90ee90' };\nconst COLOR_RED = { color: '#ff726f' };\n\nconst StatsIndividualHistory = props => {\n    const { history } = props;\n\n    const loadingRow = (\n        <tr key=\"loading\">\n            <th colSpan=\"8\" style={{ textAlign: 'center' }}>\n                Stats are loading...\n            </th>\n        </tr>\n    );\n\n    const noDataRow = (\n        <tr key=\"noData\">\n            <th colSpan=\"8\" style={{ textAlign: 'center' }}>\n                No stats to show. Please play more games to see.\n            </th>\n        </tr>\n    );\n\n    const placeholderRow = history ? noDataRow : loadingRow;\n\n    const tableBody = history && history.length > 0 ? getTableBodyRows(history) : placeholderRow;\n\n    const historyTable = (\n        <div className={classes.TableContainer}>\n            <Table dark>\n                <thead>\n                    <tr>\n                        <th className={classes.CellCenterText}>#</th>\n                        <th className={classes.CellCenterText}>Date</th>\n                        <th className={classes.CellCenterText}>Setting</th>\n                        <th className={classes.CellCenterText}>Type</th>\n                        <th className={classes.CellCenterText}>Num Players</th>\n                        <th className={classes.CellCenterText}>Team</th>\n                        <th className={classes.CellCenterText}>Role</th>\n                        <th className={classes.CellCenterText}>Result</th>\n                    </tr>\n                </thead>\n                <tbody>{tableBody}</tbody>\n            </Table>\n        </div>\n    );\n    return <div>{historyTable}</div>;\n};\n\nStatsIndividualHistory.propTypes = {\n    /**\n     * history: [{date, is_completed, is_public, is_rated, num_players, team, role, result}]\n     */\n    history: PropTypes.array\n};\n\nexport default StatsIndividualHistory;\n\nconst getTableBodyRows = history => {\n    const tableBodyRows = history.map((singleRowData, idx) => {\n        const { date, is_public, is_rated, num_players, role, team, result } = singleRowData;\n        const dateText = getDateFormatted(date);\n        const settingText = is_public ? 'public' : 'private';\n        const typeText = is_rated ? 'rated' : 'unrated';\n        const numPlayersText = num_players;\n        const teamText = team;\n        const roleText = role;\n        const resultText = result.winningTeam === team ? 'WIN' : 'LOSS';\n        const colorTeamAndRole = team === 'RESISTANCE' ? COLOR_BLUE : COLOR_RED;\n        const colorResult = resultText === 'WIN' ? COLOR_GREEN : COLOR_RED;\n        return (\n            <tr key={idx + 1}>\n                <td className={classes.CellCenterText}>{idx + 1}</td>\n                <td className={classes.CellCenterText}>{dateText}</td>\n                <td className={classes.CellCenterText}>{settingText}</td>\n                <td className={classes.CellCenterText}>{typeText}</td>\n                <td className={classes.CellCenterText}>{numPlayersText}</td>\n                <td className={classes.CellCenterText} style={colorTeamAndRole}>\n                    {teamText}\n                </td>\n                <td className={classes.CellCenterText} style={colorTeamAndRole}>\n                    {roleText}\n                </td>\n                <td className={classes.CellCenterText} style={colorResult}>\n                    {resultText}\n                </td>\n            </tr>\n        );\n    });\n\n    return tableBodyRows;\n};\n\nconst getDateFormatted = dateTime => {\n    const date_yyyy_mm_dd = new Date(dateTime).toISOString().split('T')[0];\n    return date_yyyy_mm_dd;\n};\n","import React from 'react';\nimport { Table } from 'reactstrap';\nimport classes from './StatsIndividualOverall.module.css';\n\nconst COLOR_BLUE = { color: '#7EC8E3' };\nconst COLOR_GREEN = { color: '#90ee90' };\nconst COLOR_RED = { color: '#ff726f' };\n\nconst StatsIndividualOverall = props => {\n    const { overall } = props;\n    const loadingRow = (\n        <tr key=\"loading\">\n            <th colSpan=\"6\" style={{ textAlign: 'center' }}>\n                Stats are loading...\n            </th>\n        </tr>\n    );\n    const noDataRow = (\n        <tr key=\"noData\">\n            <th colSpan=\"6\" style={{ textAlign: 'center' }}>\n                No stats to show. Please play more games to see.\n            </th>\n        </tr>\n    );\n    const placeholderRow = overall ? noDataRow : loadingRow;\n    const tableBody = overall && overall.length > 0 ? getTableBodyRows(overall) : placeholderRow;\n\n    const overallTable = (\n        <div className={classes.TableContainer}>\n            <Table dark>\n                <thead>\n                    <tr>\n                        <th className={classes.CellCenterText}>#</th>\n                        <th className={classes.CellCenterText}>Team</th>\n                        <th className={classes.CellCenterText}>Games Won</th>\n                        <th className={classes.CellCenterText}>Games Played</th>\n                        <th className={classes.CellCenterText}>Win %</th>\n                    </tr>\n                </thead>\n                <tbody>{tableBody}</tbody>\n            </Table>\n        </div>\n    );\n    return <div>{overallTable}</div>;\n};\n\nexport default StatsIndividualOverall;\n\nconst map_team_to_color = {\n    TOTAL: COLOR_GREEN,\n    RESISTANCE: COLOR_BLUE,\n    SPY: COLOR_RED\n};\n\nconst getTableBodyRows = overall => {\n    const tableBodyRows = overall.map((singleRowData, idx) => {\n        const { team, games_won, games_played } = singleRowData;\n        const win_percentage = getWinPercentage(games_won, games_played);\n\n        const colorTeam = map_team_to_color[team];\n        return (\n            <tr key={idx + 1}>\n                <td className={classes.CellCenterText}>{idx + 1}</td>\n                <td className={classes.CellCenterText} style={colorTeam}>\n                    {team}\n                </td>\n                <td className={classes.CellCenterText}>{games_won}</td>\n                <td className={classes.CellCenterText}>{games_played}</td>\n                <td className={classes.CellCenterText}>{win_percentage}</td>\n            </tr>\n        );\n    });\n\n    return tableBodyRows;\n};\n\nconst getWinPercentage = (games_won, games_played) => {\n    // Round to 1 decimal place\n    if (games_played === 0) return 0;\n    const win_percentage = parseInt(Math.round((games_won / games_played) * 1000)) / 10;\n    return win_percentage;\n};\n","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport classes from './StatsHeadToHead.module.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Alert, Button, Input, InputGroup, InputGroupAddon, Table } from 'reactstrap';\n\nclass StatsHeadToHead extends Component {\n    state = {\n        enteredNames: '',\n        headToHead: [],\n        isLoading: false,\n        errorMsg: null\n    };\n\n    _get_user_id = () => {\n        const user_id = this.props.auth && this.props.auth.user ? this.props.auth.user.id : null;\n        return user_id;\n    };\n\n    _get_user_name = () => {\n        const user_name = this.props.auth && this.props.auth.user ? this.props.auth.user.name : null;\n        return user_name;\n    };\n\n    isValidQuery = (user_id, enteredNames) => {\n        // 1) user_id must be valid\n        if (!user_id) return false;\n\n        // 2) Must have length > 0\n        const isLengthValid = enteredNames.length > 0;\n        if (!isLengthValid) return false;\n\n        // 2) Must not contain own username\n        const user_name = this._get_user_name();\n        if (enteredNames.includes(user_name)) return false;\n\n        // 3) Must contain no spaces\n        const containsSpaces = enteredNames.includes(' ');\n        return !containsSpaces;\n    };\n\n    handleEnterNames = event => {\n        const { value: enteredNames } = event.target;\n        this.setState({\n            enteredNames\n        });\n    };\n\n    handlePressEnter = event => {\n        if (event.key === 'Enter') {\n            this.handleSearch();\n        }\n    };\n\n    handleSearch = () => {\n        const { enteredNames } = this.state;\n        const user_id = this._get_user_id();\n        const isValidQuery = this.isValidQuery(user_id, enteredNames);\n\n        if (isValidQuery) {\n            this.setState({\n                isLoading: true\n            });\n            axios.get(`/api/games/headtohead/${user_id}/${enteredNames}`).then(res => {\n                this.setState({\n                    isLoading: false,\n                    errorMsg: null,\n                    headToHead: res.data\n                });\n            });\n        } else {\n            this.setState({\n                errorMsg: 'Invalid query. Please follow the example: player1,player2 ...'\n            });\n        }\n    };\n\n    render() {\n        const { enteredNames, headToHead, isLoading, errorMsg } = this.state;\n        const renderedErrorMessage = errorMsg ? (\n            <Alert className=\"mt-3\" color=\"danger\">\n                {errorMsg}\n            </Alert>\n        ) : null;\n        const userNamesInput = (\n            <InputGroup>\n                <Input\n                    type=\"text\"\n                    value={enteredNames}\n                    placeholder=\"Enter a username or a list of usernames (separated by commas, no space)...\"\n                    onChange={this.handleEnterNames}\n                    onKeyPress={this.handlePressEnter}\n                />\n                <InputGroupAddon addonType=\"append\">\n                    <Button color=\"success\" onClick={this.handleSearch}>\n                        Search\n                    </Button>\n                </InputGroupAddon>\n            </InputGroup>\n        );\n        const loadingRow = (\n            <tr key=\"loading\">\n                <th colSpan=\"6\" className={classes.CellCenterText}>\n                    Stats are loading...\n                </th>\n            </tr>\n        );\n\n        const noDataRow = (\n            <tr key=\"noData\">\n                <th colSpan=\"6\" className={classes.CellCenterText}>\n                    No stats to show. Please play more games to see.\n                </th>\n            </tr>\n        );\n\n        const tableBodyRows = getTableBodyRows(headToHead);\n        const renderedTableBodyRows = tableBodyRows.length > 0 ? tableBodyRows : noDataRow;\n        const tableBody = isLoading ? loadingRow : renderedTableBodyRows;\n        const headToHeadTable = (\n            <div className={classes.TableContainer}>\n                <Table dark>\n                    <thead>\n                        <tr key=\"header\">\n                            <th className={classes.CellCenterText}>#</th>\n                            <th className={classes.CellCenterText}>Player</th>\n                            <th className={classes.CellCenterText}>Team</th>\n                            <th className={classes.CellCenterText}>Your Games Won</th>\n                            <th className={classes.CellCenterText}>Total Games Played</th>\n                            <th className={classes.CellCenterText}>Win %</th>\n                        </tr>\n                    </thead>\n                    <tbody>{tableBody}</tbody>\n                </Table>\n            </div>\n        );\n\n        return (\n            <div>\n                {renderedErrorMessage}\n                {userNamesInput}\n                {headToHeadTable}\n            </div>\n        );\n    }\n}\n\nStatsHeadToHead.propTypes = {\n    auth: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, null)(StatsHeadToHead);\n\nconst getTableBodyRows = headToHead => {\n    const tableBodyRows = headToHead.map((singlePlayerData, idx) => {\n        const { Player, Same, Different } = singlePlayerData;\n\n        const gamesWonSameTeam = Same['Your Games Won'];\n        const totalGamesPlayedSameTeam = Same['Total Games Played'];\n        const winPercentageSameTeam = getWinPercentage(gamesWonSameTeam, totalGamesPlayedSameTeam);\n        const gamesWonDifferentTeam = Different['Your Games Won'];\n        const totalGamesPlayedDifferentTeam = Different['Total Games Played'];\n        const winPercentageDifferentTeam = getWinPercentage(gamesWonDifferentTeam, totalGamesPlayedDifferentTeam);\n        return (\n            <Fragment key={idx}>\n                <tr key={idx * 2}>\n                    <td className={classes.CellCenterText} style={{ verticalAlign: 'middle' }} rowSpan={2}>\n                        {idx + 1}\n                    </td>\n                    <td className={classes.CellCenterText} style={{ verticalAlign: 'middle' }} rowSpan={2}>\n                        {Player}\n                    </td>\n                    <td className={classes.CellCenterText}>Same</td>\n                    <td className={classes.CellCenterText}>{gamesWonSameTeam}</td>\n                    <td className={classes.CellCenterText}>{totalGamesPlayedSameTeam}</td>\n                    <td className={classes.CellCenterText}>{winPercentageSameTeam}</td>\n                </tr>\n                <tr key={idx * 2 + 1}>\n                    <td className={classes.CellCenterText}>Different</td>\n                    <td className={classes.CellCenterText}>{gamesWonDifferentTeam}</td>\n                    <td className={classes.CellCenterText}>{totalGamesPlayedDifferentTeam}</td>\n                    <td className={classes.CellCenterText}>{winPercentageDifferentTeam}</td>\n                </tr>\n            </Fragment>\n        );\n    });\n\n    return tableBodyRows;\n};\n\nconst getWinPercentage = (games_won, games_played) => {\n    // Round to 1 decimal place\n    if (games_played === 0) return 0;\n    const win_percentage = parseInt(Math.round((games_won / games_played) * 1000)) / 10;\n    return win_percentage;\n};\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport classes from './StatsPage.module.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Container } from 'reactstrap';\n\nimport AccessDeniedPage from '../AccessDeniedPage/AccessDeniedPage';\nimport LoadingSpinner from '../Loading/LoadingSpinner';\nimport StatsIndividualByRoles from './StatsIndividualByRoles/StatsIndividualByRoles';\nimport StatsIndividualHistory from './StatsIndividualHistory/StatsIndividualHistory';\nimport StatsIndividualOverall from './StatsIndividualOverall/StatsIndividualOverall';\nimport StatsHeadToHead from './StatsHeadToHead/StatsHeadToHead';\n\nexport class StatsPage extends Component {\n    state = {\n        isAuthenticated: false,\n        isLoadingRating: true,\n        isLoadingStats: true,\n        rating: null,\n        history: null,\n        overall: null,\n        byRoles: null\n    };\n\n    componentDidMount() {\n        setTimeout(() => {\n            // Get individual stats data and set state accordingly\n            const user_id = this._get_user_id();\n            if (!!user_id) {\n                axios.get(`/api/ratings/${user_id}`).then(res => {\n                    const rating = res.data;\n                    this.setState({\n                        isLoadingRating: false,\n                        rating\n                    });\n                });\n                axios.get(`/api/games/${user_id}`).then(res => {\n                    /**\n                     * [{date, is_completed, is_public, is_rated, num_players, team, role, result}]\n                     */\n                    const data = res.data;\n                    const history = _getHistoryData(data);\n                    const overall = _getOverallData(data);\n                    const byRoles = _getByRolesData(data);\n                    this.setState({\n                        isAuthenticated: true,\n                        isLoadingStats: false,\n                        history,\n                        overall,\n                        byRoles\n                    });\n                });\n            } else {\n                this.setState({\n                    isLoadingRating: false,\n                    isLoadingStats: false\n                });\n            }\n        }, 1000);\n    }\n\n    _get_user_id = () => {\n        const user_id = this.props.auth && this.props.auth.user ? this.props.auth.user.id : null;\n        return user_id;\n    };\n\n    render() {\n        const { isAuthenticated, isLoadingRating, isLoadingStats, rating, history, overall, byRoles } = this.state;\n\n        if (isLoadingRating || isLoadingStats) {\n            return <LoadingSpinner />;\n        }\n\n        if (!isAuthenticated) {\n            return <AccessDeniedPage />;\n        }\n\n        return (\n            <div>\n                <Container>\n                    <div className={classes.RatingBanner}>Rating: {rating ? rating : 1500}</div>\n                    <hr />\n                    <h3>History</h3>\n                    <hr />\n                    <StatsIndividualHistory history={history} />\n                    <hr />\n                    <h3>Overall</h3>\n                    <hr />\n                    <StatsIndividualOverall overall={overall} />\n                    <hr />\n                    <h3>By Role</h3>\n                    <hr />\n                    <StatsIndividualByRoles byRoles={byRoles} />\n                    <hr />\n                    <h3>Head to Head</h3>\n                    <hr />\n                    <StatsHeadToHead />\n                </Container>\n            </div>\n        );\n    }\n}\n\nStatsPage.propTypes = {\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps, null)(StatsPage);\n\nconst _getHistoryData = data => {\n    // Get all (previously just top 5, but now table is scrollable)\n    return data;\n};\n\nconst _getOverallData = data => {\n    // Aggregate based on team\n    if (data.length === 0) return [];\n    let RESISTANCE_GAMES_WON = 0;\n    let RESISTANCE_GAMES_PLAYED = 0;\n    let SPY_GAMES_WON = 0;\n    let SPY_GAMES_PLAYED = 0;\n\n    data.forEach(singleGameData => {\n        const {\n            team,\n            result: { winningTeam }\n        } = singleGameData;\n        const resultText = team === winningTeam ? 'WIN' : 'LOSS';\n        if (team === 'RESISTANCE') {\n            if (resultText === 'WIN') {\n                RESISTANCE_GAMES_WON++;\n            }\n            RESISTANCE_GAMES_PLAYED++;\n        } else if (team === 'SPY') {\n            if (resultText === 'WIN') {\n                SPY_GAMES_WON++;\n            }\n            SPY_GAMES_PLAYED++;\n        }\n    });\n    const TOTAL_GAMES_WON = RESISTANCE_GAMES_WON + SPY_GAMES_WON;\n    const TOTAL_GAMES_PLAYED = RESISTANCE_GAMES_PLAYED + SPY_GAMES_PLAYED;\n    return [\n        { team: 'TOTAL', games_won: TOTAL_GAMES_WON, games_played: TOTAL_GAMES_PLAYED },\n        { team: 'RESISTANCE', games_won: RESISTANCE_GAMES_WON, games_played: RESISTANCE_GAMES_PLAYED },\n        { team: 'SPY', games_won: SPY_GAMES_WON, games_played: SPY_GAMES_PLAYED }\n    ];\n};\n\nconst _getByRolesData = data => {\n    const uniqueRolesAndTeams = [];\n    const setOfUniqueRoles = new Set();\n    const mapRoleToGamesWon = new Map();\n    const mapRoleToGamesPlayed = new Map();\n\n    data.forEach(singleGameData => {\n        const {\n            role,\n            team,\n            result: { winningTeam }\n        } = singleGameData;\n        const resultText = team === winningTeam ? 'WIN' : 'LOSS';\n        if (!setOfUniqueRoles.has(role)) {\n            setOfUniqueRoles.add(role);\n            uniqueRolesAndTeams.push({ role, team });\n            mapRoleToGamesWon.set(role, resultText === 'WIN' ? 1 : 0);\n            mapRoleToGamesPlayed.set(role, 1);\n        } else {\n            if (resultText === 'WIN') {\n                // Increment games_won\n                const games_won = mapRoleToGamesWon.get(role);\n                mapRoleToGamesWon.set(role, games_won + 1);\n            }\n            // Increment games_played\n            const games_played = mapRoleToGamesPlayed.get(role);\n            mapRoleToGamesPlayed.set(role, games_played + 1);\n        }\n    });\n\n    // Create data from helpers\n    const byRolesData = uniqueRolesAndTeams.map(roleAndTeam => {\n        const { role, team } = roleAndTeam;\n        const games_won = mapRoleToGamesWon.get(role);\n        const games_played = mapRoleToGamesPlayed.get(role);\n        return {\n            role,\n            team,\n            games_won,\n            games_played\n        };\n    });\n\n    // Sort final data\n    const sortByTeamThenRole = (a, b) => {\n        if (a.team === b.team) {\n            return a.role > b.role ? 1 : -1;\n        }\n        return a.team > b.team ? 1 : -1;\n    };\n    byRolesData.sort(sortByTeamThenRole);\n    return byRolesData;\n};\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport AboutPage from '../../Pages/AboutPage/AboutPage';\nimport GameRoom from '../../GameRoom/GameRoom';\nimport HomePage from '../../Pages/HomePage/HomePage';\nimport RulesPage from '../../Pages/RulesPage/RulesPage';\nimport StatsPage from '../../Pages/StatsPage/StatsPage';\n\nconst AppRoutes = (props) => {\n    const sharedRoutes = (\n        <Fragment>\n            <Route exact path='/' component={HomePage} />\n            <Route exact path='/about' component={AboutPage} />\n            <Route exact path='/rules' component={RulesPage} />\n            {/** Below routes are not supposed to be \"shared\" but do not render otherwise (even on refresh). */}\n            <Route exact path='/stats' component={StatsPage} />\n            <Route exact path='/game/:room_id' render={(props) => <GameRoom {...props} is_public={true} />} />\n            <Route exact path='/game/:room_id/pwd/:pwd' render={(props) => <GameRoom {...props} is_public={false} />} />\n        </Fragment>\n    );\n    const authRoutes = (\n        <Switch>\n            {sharedRoutes}\n            <Redirect to='/'></Redirect>\n        </Switch>\n    );\n\n    const guestRoutes = (\n        <Switch>\n            {sharedRoutes}\n            <Redirect to='/'></Redirect>\n        </Switch>\n    );\n    return props.isAuthenticated ? <Switch>{authRoutes}</Switch> : <Switch>{guestRoutes}</Switch>;\n};\n\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, null)(AppRoutes);\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom';\nimport store from './store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { loadUser } from './actions/authActions';\nimport AppNavbar from './components/App/AppNavbar/AppNavbar';\nimport AppRoutes from './components/App/AppRoutes/AppRoutes';\n\nclass App extends Component {\n    componentDidMount() {\n        console.log(`Plz don't hack me ;D`);\n        store.dispatch(loadUser());\n    }\n\n    render() {\n        return (\n            <Provider store={store}>\n                <HashRouter>\n                    <AppNavbar />\n                    <AppRoutes />\n                </HashRouter>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellCenterText\":\"AboutLeaderboard_CellCenterText__3p2jj\",\"TableContainer\":\"AboutLeaderboard_TableContainer__3IQf-\",\"LeaderboardBanner\":\"AboutLeaderboard_LeaderboardBanner__1M7DE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PlayerCard\":\"PlayerCard_PlayerCard__pBzvF\",\"PlayerCard2\":\"PlayerCard_PlayerCard2__3oGYH\",\"MissionMarkerWooden\":\"PlayerCard_MissionMarkerWooden__2Hxhp\",\"MissionMarker\":\"PlayerCard_MissionMarker__ULt7u\",\"LeaderMarker\":\"PlayerCard_LeaderMarker__1y6YS\",\"ExcaliburMarker\":\"PlayerCard_ExcaliburMarker__5hubI\",\"HammerMarker\":\"PlayerCard_HammerMarker__2brh8\",\"LadyMarker\":\"PlayerCard_LadyMarker__1eE2P\",\"NameBanner\":\"PlayerCard_NameBanner__ox54G\",\"NameBanner2\":\"PlayerCard_NameBanner2__12jdt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameButtons\":\"GameButtons_GameButtons__B_yPB\",\"GameButtonDuo\":\"GameButtons_GameButtonDuo__1IMFz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OuterContainer\":\"WelcomePage_OuterContainer__rIexZ\",\"InnerContainer\":\"WelcomePage_InnerContainer__Sd_b7\",\"InnerText\":\"WelcomePage_InnerText__TbIob\",\"SubText\":\"WelcomePage_SubText__3WVPn\",\"DisclaimerText\":\"WelcomePage_DisclaimerText__2CGtN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MissionTracker\":\"MissionTracker_MissionTracker__1Q73D\",\"MissionTrackerToken\":\"MissionTracker_MissionTrackerToken__lxFwg\",\"MissionTrackerText\":\"MissionTracker_MissionTrackerText__DxnLb\",\"MissionTrackerSubtext\":\"MissionTracker_MissionTrackerSubtext__3KNqK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OuterTableContainer\":\"GameTranscript_OuterTableContainer__3FzwH\",\"TableHeader\":\"GameTranscript_TableHeader__9U7P6\",\"TableBodyContainer\":\"GameTranscript_TableBodyContainer__ZbnKN\",\"TableBody\":\"GameTranscript_TableBody__3aoc-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CharacterCardContainer\":\"CharacterCard_CharacterCardContainer__2xqq3\",\"CharacterCardImageContainer\":\"CharacterCard_CharacterCardImageContainer__2pXA8\",\"CharacterCardImage\":\"CharacterCard_CharacterCardImage__11cJ1\",\"CharacterCardTextContainer\":\"CharacterCard_CharacterCardTextContainer__3kRON\"};"],"sourceRoot":""}